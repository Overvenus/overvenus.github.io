<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Neil]]></title>
  <subtitle><![CDATA[Share something cool.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://neilsh.me/"/>
  <updated>2016-01-20T05:52:44.000Z</updated>
  <id>http://neilsh.me/</id>
  
  <author>
    <name><![CDATA[Neil Shen]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[TButton 命令行快捷按钮]]></title>
    <link href="http://neilsh.me/2016/01/20/tbutton-mini-commands-launcher/"/>
    <id>http://neilsh.me/2016/01/20/tbutton-mini-commands-launcher/</id>
    <published>2016-01-20T04:02:36.000Z</published>
    <updated>2016-01-20T05:52:44.000Z</updated>
    <content type="html"><![CDATA[<p>众所周知 Linux 的命令行十分强大，一些图形化操作很麻烦的事情，在命令行里敲击下几下键盘就能搞定。<br>比如说，在虚拟机里跑 windows，用 word 来写一些报告，但是资料收集是在 Ubuntu 里做的，在收集资料的时候又不想让虚拟机空耗着 CPU。这时我们可以在命令行里输入：<br><code>killall -s STOP vmware-vmx</code><br>过不了多久，之前还呼啸的风扇现在已经没声音了。<br>要恢复被暂停的虚拟机也非常简单，只要输入：<br><code>killall -s CONT vmware-vmx</code></p>
<p>如果用图形化来暂停虚拟机的话，需要打开 System Monitor 点击 Processes 标签，在几百个进程中找到 vmware-vmx，右击出现菜单，点击 Stop Process。擅长用户交互的图形化界面在这种事前羸弱不堪。</p>
<p>不过经常敲键盘也确实挺烦人的，能不能做一个快捷方式，鼠标点一下就行了呢？我在网上找了一圈，并没有发现现成的解决方案，又是自己动手丰衣足食的节奏，于是就有了 <a href="https://github.com/overvenus/tbutton" target="_blank" rel="external"><strong>TButton</strong></a>.</p>
<p><strong>TButton</strong> 是用 Python 写的，做做很快，没花多长时间。参考了 <a href="https://github.com/phuslu/goproxy/blob/master/assets/gui/goagent-gtk.py" target="_blank" rel="external">goagent-gtk</a><br>开源在 <em><a href="https://github.com/overvenus/tbutton" target="_blank" rel="external">https://github.com/overvenus/tbutton</a></em><br>昨天我做了一个安装包，<a href="https://github.com/overvenus/tbutton/releases" target="_blank" rel="external">戳这下载</a><br>目前的功能还很简单，就只有“点击 –&gt; 执行”，对应的命令要在配置文件中写好，配置文件在 <code>~/.config/Tbutton/</code></p>
<p>下面是 TButton 在我电脑上的使用效果：</p>
<p><img src="https://raw.githubusercontent.com/overvenus/tbutton/master/art/TbuttonScr.png" alt=""></p>
<p>PS：这个小玩具其实早想写了，但总是迟迟不肯动手，这不趁复习周看书看烦了，赶紧写一下，不然看书都没效率了（逃。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>众所周知 Linux 的命令行十分强大，一些图形化操作很麻烦的事情，在命令行里敲击下几下键盘就能搞定。<br>比如说，在虚拟机里跑 windows，用 word 来写一些报告，但是资料收集是在 Ubuntu 里做的，在收集资料的时候又不想让虚拟机空耗着 CPU。这时我们可以]]>
    </summary>
    
      <category term="Python" scheme="http://neilsh.me/tags/Python/"/>
    
      <category term="Ubuntu" scheme="http://neilsh.me/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年总结]]></title>
    <link href="http://neilsh.me/2015/12/31/summary-2015/"/>
    <id>http://neilsh.me/2015/12/31/summary-2015/</id>
    <published>2015-12-31T03:12:58.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u516C_u5F00_u8BFE"><a href="#u516C_u5F00_u8BFE" class="headerlink" title="公开课"></a>公开课</h2><p>2015 年，我自学了 6.006，6.033，6.828 和 6.824，选择这几门课主要是补计算机的基础知识。<br>等等 6.824 不是 Graduate 课程吗？管他呢，学了再说。(・ε・) 虽说现在还没有学完，但个人感觉这门课并不比前面的 6.828 难。最近临近期末，得暂时放一放，考试周结束后接着学。<br>论文看了不少，大部分是这几门课中要求的，小部分是自己找来的，大都关于操作系统和分布式系统。</p>
<ul>
<li>Belay, Adam, Andrea Bittau, and Ali Mashtizadeh. 2012. “Dune: Safe User-Level Access to Privileged Cpu Features.” OSDI ’12: Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation, 335–48. <a href="https://www.usenix.org/system/files/conference/osdi12/osdi12-final-117.pdf" target="_blank" rel="external">https://www.usenix.org/system/files/conference/osdi12/osdi12-final-117.pdf</a>.</li>
<li>Belay, Adam, George Prekas, Ana Klimovic, Samuel Grossman, Christos Kozyrakis, and Edouard Bugnion. 2014. “IX: A Protected Dataplane Operating System for High Throughput and Low Latency.” Proceedings of the 11th USENIX Conference on Operating Systems Design and Implementation, 49–65. <a href="http://dl.acm.org/citation.cfm?id=2685048.2685053" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=2685048.2685053</a>.</li>
<li>Boyd-wickizer, Silas, M Frans Kaashoek, Robert Morris, and Nickolai Zeldovich. 2012. “Non-Scalable Locks Are Dangerous.” Proceedings of the Linux Symposium. <a href="http://ns1.fs.net/papers/linux:lock.pdf" target="_blank" rel="external">http://ns1.fs.net/papers/linux:lock.pdf</a>.</li>
<li>Clements, Austin T, M Frans Kaashoek, and Nickolai Zeldovich. 2013. “RadixVM : Scalable Address Spaces for Multithreaded Applications.” EuroSys, 211–24. doi:10.1145/2465351.2465373.</li>
<li>Engler, D R, M F Kaaspoek, and J O’Toole. 1995. “ExoKernel: An Operating System Architecture for Application Level Resource Management.” Proceedings of the 15th ACM Symposium on Operating System Principles 1 (212): 256–66. doi:<a href="http://doi.acm.org/10.1145/224056.224076" target="_blank" rel="external">http://doi.acm.org/10.1145/224056.224076</a>.</li>
<li>Hunt, Galen C, and James R Larus. 2007. “Singularity: Rethinking the Software Stack.” Contract 41 (2): 37–49. doi:10.1145/1243418.1243424.<a id="more"></a></li>
<li>Kivity, Avi, Uri Lublin, Anthony Liguori, Yaniv Kamay, and Dor Laor. 2007. “Kvm: The Linux Virtual Machine Monitor.” Proceedings of the Linux Symposium 1: 225–30. <a href="https://www.kernel.org/doc/mirror/ols2007v1.pdf#page=225" target="_blank" rel="external">https://www.kernel.org/doc/mirror/ols2007v1.pdf#page=225</a>.</li>
<li>Ritchie, D M, and K Thompson. 1974. “The UNIX Time-Sharing System.” Communications of the ACM 17 (7): 365–75.</li>
<li>Ritchie, Dm. 1984. “The Evolution of the Unix Time-Sharing System.” AT&amp;T Bell Laboratories Technical Journal 63 (6): 1577–93. doi:10.1007/3-540-09745-7_2.</li>
<li>Simon, Herbert A, Philosophical Society, and No Dec. 2007. “The Architecture of Complexity” 106 (6): 467–82. doi:10.2307/985254.</li>
<li>Tang, Shuo, Haohui Mai, and S.T. King. 2010. “Trust and Protection in the Illinois Browser Operating System.” Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI ’10), no. October: 17–31. <a href="http://www.usenix.org/events/osdi10/tech/full_papers/Tang.pdf" target="_blank" rel="external">http://www.usenix.org/events/osdi10/tech/full_papers/Tang.pdf</a>.</li>
<li>Bolosky, William J, Dexter Bradshaw, Randolph B Haagens, Norbert P Kusters, and Peng Li. 2011. “Paxos Replicated State Machines as the Basis of a High-Performance Data Store 2 . Paxos Replicated State Ma- Chines.” System, 11.</li>
<li>Cao, P, E Felten, and K Li. 1994. “Implementation and Performance of Application-Controlled File Caching.” Proceedings of the First Symposium on Operating Systems Design and Implementation, 165–78. citeseer.ifi.unizh.ch/cao94implementation.html.</li>
<li>Chandra, Tushar, Robert Griesemer, and Joshua Redstone. 2007a. “Paxos Made Live - An Engineering Perspective ( 2006 Invited Talk ).” Perspective 7: 398–407. doi:10.1145/1281100.1281103.</li>
<li>Tushar Chandra, Robert Griesemer, and Joshua Redstone. 2007b. “Paxos Made Live: An Engineering Perspective.” Proceedings of the Twenty-Sixth Annual ACM Symposium on Principles of Distributed Computing, 398–407. doi:10.1145/1281100.1281103.</li>
<li>Corbett, James C, Jeffrey Dean, Michael Epstein, Andrew Fikes, Christopher Frost, J J Furman, Sanjay Ghemawat, et al. 2012. “Spanner : Google ’ S Globally-Distributed Database.” Proceedings of OSDI 2012, 1–14. doi:10.1145/2491245.</li>
<li>Cully, Brendan, Geoffrey Lefebvre, and Dutch Meyer. 2008. “Remus: High Availability via Asynchronous Virtual Machine Replication.” Proceedings of the 5th … vi: 161–74. <a href="http://portal.acm.org/citation.cfm?id=1387589.1387601\nhttp://www.usenix.org/event/nsdi08/tech/full_papers/cully/cully_html/" target="_blank" rel="external">http://portal.acm.org/citation.cfm?id=1387589.1387601\nhttp://www.usenix.org/event/nsdi08/tech/full_papers/cully/cully_html/</a>.</li>
<li>Dean, Jeffrey, and Sanjay Ghemawat. n.d. “MapReduce : Simplified Data Processing on Large Clusters,” 137–49.</li>
<li>Fischer, Michael J., Nancy A. Lynch, and Michael S. Paterson. 1985. “Impossibility of Distributed Consensus with One Faulty Process.” Journal of the ACM 32 (2): 374–82. doi:10.1145/3149.214121.</li>
<li>Hunt, Patrick, Mahadev Konar, Fp Junqueira, and Benjamin Reed. 2010. “ZooKeeper: Wait-Free Coordination for Internet-Scale Systems.” USENIX Annual Technical … 8: 11–11. <a href="http://portal.acm.org/citation.cfm?id=1855851\nhttps://www.usenix.org/event/usenix10/tech/full_papers/Hunt.pdf" target="_blank" rel="external">http://portal.acm.org/citation.cfm?id=1855851\nhttps://www.usenix.org/event/usenix10/tech/full_papers/Hunt.pdf</a>.</li>
<li>Lamport, Leslie. 2001. “Paxos Made Simple.” ACM SIGACT News 32 (4): 51–58. doi:10.1145/568425.568433.</li>
<li>Liskov, Barbara, and James Cowling. 2012. “Viewstamped Replication Revisited,” no. MIT-CSAIL-TR-2012-021: 1–14.</li>
<li>Liskov, Barbara, Sanjay Ghemawat, Robert Gruber, Paul Johnson, and Liuba Shrira. 1991. “Replication in the Harp File System.” ACM SIGOPS Operating Systems Review 25: 226–38. doi:10.1145/121133.121169.</li>
<li>Nightingale, Edmund B., Jeremy Elson, and Jinliang Fan. 2012. “Flat Datacenter Storage.” OSDI’12 Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation, 1–15. <a href="https://www.usenix.org/system/files/conference/osdi12/osdi12-final-75.pdf" target="_blank" rel="external">https://www.usenix.org/system/files/conference/osdi12/osdi12-final-75.pdf</a>.</li>
<li>Drepper, Ulrich. 2007. “What Every Programmer Should Know about Memory.” Red Hat, Inc 3: 114. doi:10.1.1.91.957.</li>
<li>Fähndrich, Manuel, Mark Aiken, Chris Hawblitzel, Orion Hodson, Galen Hunt, James R. Larus, and Steven Levi. 2006. “Language Support for Fast and Reliable Message-Based Communication in Singularity OS.” ACM SIGOPS Operating Systems Review 40 (4): 177. doi:10.1145/1218063.1217953.</li>
<li>Mellor-crummey, John M, and Michael L Scott. 1991. “Calable Synchronization on.” Computer 9 (1): 21–65. doi:10.1145/103727.103729.</li>
<li>Patterson, David a., Garth Gibson, and Randy H. Katz. 1988. “A Case for Redundant Arrays of Inexpensive Disks (RAID).” ACM SIGMOD Record 17 (3): 109–16. doi:10.1145/971701.50214.</li>
<li>Saltzer, J. H., D. P. Reed, and D. D. Clark. 1984. “End-to-End Arguments in System Design.” ACM Transactions on Computer Systems 2 (4): 277–88. doi:10.1145/357401.357402.</li>
<li>Savage, Stefan, Michael Burrows, Greg Nelson, Patrick Sobalvarro, and Thomas Anderson. 1997. “Eraser: A Dynamic Data Race Detector for Multithreaded Programs.” ACM Transactions on Computer Systems 15 (4): 391–411. doi:10.1145/265924.265927.</li>
<li>Tweedie, SC. 1998. “Journaling the Linux ext2fs Filesystem.” The Fourth Annual Linux Expo, 1–8. <a href="http://www.stanford.edu/class/cs240/readings/ext2-journal-design.pdf" target="_blank" rel="external">http://www.stanford.edu/class/cs240/readings/ext2-journal-design.pdf</a>.</li>
<li>Uhlig, Rich, Gil Neiger, Dion Rodgers, Amy L. Santoni, Fernando C M Martins, Andrew V. Anderson, Steven M. Bennett, Alain Kägi, Felix H. Leung, and Larry Smith. 2005. “Intel Virtualization Technology.” Computer 38 (5): 48–56. doi:10.1109/MC.2005.163.</li>
</ul>
<h2 id="u9879_u76EE"><a href="#u9879_u76EE" class="headerlink" title="项目"></a>项目</h2><p>JOS: 类 UNIX 的操作系统内核，6.828 配套的实验项目，我在这个项目中<a href="/2015/08/30/few_words_about_6_828/">学到了很多</a>。<br>其他的几个小项目倒更像是玩具，不在这显摆了。</p>
<h2 id="u9605_u8BFB"><a href="#u9605_u8BFB" class="headerlink" title="阅读"></a>阅读</h2><p>在 2015 一年里，书看得不是很多。我很难想象别人是怎么看完那长长的书单的。</p>
<ul>
<li>《C和指针》 Kenneth A. Reek</li>
<li>《算法导论》前四章 Thomas H.Cormen, Charles E.Leiserson, Ronald L.Rivest, Clifford Stein</li>
<li>《计算机系统设计原理》 Jerome H. Saltzer, M. Frans Kaashoek</li>
<li>《现代操作系统》 Andrew S. Tanenbaum</li>
<li>《Structured Computer Organization》 Andrew S. Tanenbaum</li>
<li>《深入理解计算机系统》 Randal E.Bryant, David R.O’Hallaron</li>
</ul>
<hr>
<ul>
<li>《如何阅读一本书》 莫提默·J. 艾德勒 查尔斯·范多伦 </li>
<li>《民主的细节》 刘瑜</li>
<li>《黑客与画家》 Paul Graham</li>
<li>《三体》 刘慈欣</li>
<li>《百年孤独》 加西亚·马尔克斯 著 范晔 译</li>
<li>《基督山伯爵》 大仲马</li>
</ul>
<h2 id="u503C_u5F97_u4E00_u63D0"><a href="#u503C_u5F97_u4E00_u63D0" class="headerlink" title="值得一提"></a>值得一提</h2><ul>
<li>在 StackOverflow 回答了第一个问题，并被接受！</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/7f793092gw1ezitciklpaj20gf0cqjv1.jpg" alt=""></p>
<ul>
<li>Github 第一个 Pull Requset，并被合并。我为科学计算界做出了贡献！ (΄◞ิ౪◟ิ‵)</li>
<li>第一份实习，简历有点料了！</li>
<li>建立了这个博客！</li>
</ul>
<h2 id="u603B_u7ED3_u4E0E_u5C55_u671B"><a href="#u603B_u7ED3_u4E0E_u5C55_u671B" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>总的来说，我在 2015 年过得很充实，对自己的表现也很满意。有得必有失，这一年我长期呆在实验室里，闷头看书学习，户外活动急剧减少，2014 年坚持的跑步也在今年放弃了，起初安慰自己没时间，有雾霾，但真的是这样吗？时间就像海绵里的水，只要你愿意挤，总还是有的。雾霾天跑步诚然不利于健康，但也不会天天都是。<br>2016 年，我希望自己在保持这股子学习劲儿的同时还要恢复户外锻炼的习惯，就酱。</p>
<p>完</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u516C_u5F00_u8BFE"><a href="#u516C_u5F00_u8BFE" class="headerlink" title="公开课"></a>公开课</h2><p>2015 年，我自学了 6.006，6.033，6.828 和 6.824，选择这几门课主要是补计算机的基础知识。<br>等等 6.824 不是 Graduate 课程吗？管他呢，学了再说。(・ε・) 虽说现在还没有学完，但个人感觉这门课并不比前面的 6.828 难。最近临近期末，得暂时放一放，考试周结束后接着学。<br>论文看了不少，大部分是这几门课中要求的，小部分是自己找来的，大都关于操作系统和分布式系统。</p>
<ul>
<li>Belay, Adam, Andrea Bittau, and Ali Mashtizadeh. 2012. “Dune: Safe User-Level Access to Privileged Cpu Features.” OSDI ’12: Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation, 335–48. <a href="https://www.usenix.org/system/files/conference/osdi12/osdi12-final-117.pdf">https://www.usenix.org/system/files/conference/osdi12/osdi12-final-117.pdf</a>.</li>
<li>Belay, Adam, George Prekas, Ana Klimovic, Samuel Grossman, Christos Kozyrakis, and Edouard Bugnion. 2014. “IX: A Protected Dataplane Operating System for High Throughput and Low Latency.” Proceedings of the 11th USENIX Conference on Operating Systems Design and Implementation, 49–65. <a href="http://dl.acm.org/citation.cfm?id=2685048.2685053">http://dl.acm.org/citation.cfm?id=2685048.2685053</a>.</li>
<li>Boyd-wickizer, Silas, M Frans Kaashoek, Robert Morris, and Nickolai Zeldovich. 2012. “Non-Scalable Locks Are Dangerous.” Proceedings of the Linux Symposium. <a href="http://ns1.fs.net/papers/linux:lock.pdf">http://ns1.fs.net/papers/linux:lock.pdf</a>.</li>
<li>Clements, Austin T, M Frans Kaashoek, and Nickolai Zeldovich. 2013. “RadixVM : Scalable Address Spaces for Multithreaded Applications.” EuroSys, 211–24. doi:10.1145/2465351.2465373.</li>
<li>Engler, D R, M F Kaaspoek, and J O’Toole. 1995. “ExoKernel: An Operating System Architecture for Application Level Resource Management.” Proceedings of the 15th ACM Symposium on Operating System Principles 1 (212): 256–66. doi:<a href="http://doi.acm.org/10.1145/224056.224076">http://doi.acm.org/10.1145/224056.224076</a>.</li>
<li>Hunt, Galen C, and James R Larus. 2007. “Singularity: Rethinking the Software Stack.” Contract 41 (2): 37–49. doi:10.1145/1243418.1243424.]]>
    
    </summary>
    
      <category term="Summary" scheme="http://neilsh.me/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最小二乘法的矩阵形式]]></title>
    <link href="http://neilsh.me/2015/12/25/least-square-in-matrix/"/>
    <id>http://neilsh.me/2015/12/25/least-square-in-matrix/</id>
    <published>2015-12-25T02:10:28.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u62DF_u5408_u66F2_u7EBF_u4E0E_u6700_u5C0F_u4E8C_u4E58_u6CD5"><a href="#u62DF_u5408_u66F2_u7EBF_u4E0E_u6700_u5C0F_u4E8C_u4E58_u6CD5" class="headerlink" title="拟合曲线与最小二乘法"></a>拟合曲线与最小二乘法</h2><p>曲线拟合指：已知 m 个数据点 $(x_i,y_i ),i=1,2,3⋯,m$ 其中 m 不全相同，寻求函数 $f(x; \beta_0, \beta_1, \dots, \beta_n)$ 的待定参数 $\beta_0, \beta_1, \dots, \beta_n$ 的一组取值，使得在这组取值之下，函数 $f(x; \beta_0, \beta_1, \dots,\beta_n)$ 与已知 m 个数据点整体上最为接近。</p>
<p>最小二乘曲线拟合方法：根据已知数据，首先构造出能够反映含有回归参数的回归方程 $f(x; \beta_i),i = 0, 1, 2, …, n$ :</p>
<p>$$<br>\begin{align}<br>\hat{y} &amp;= \beta_0 + \beta_1 x + \beta_2 x^2 + \dots + \beta_n x^n \\<br>y &amp;= \hat{y} + \delta<br>\end{align}<br>$$</p>
<p>$\delta$ 是残差，这是回归方程与真实值存在出入的原因[1]。</p>
<p>根据 m 个数据点 $(x_i, y_i),i=1,2,3⋯,m$ 可以定义一个代表偏离程度的函数:</p>
<p>$$<br>S(\beta_0, \beta_1, \dots, \beta_n) = \sum_{j = 1}^m [y_i - f(x; \beta_0, \beta_1, \dots,\beta_n)]^2 = \sum \delta<br>$$</p>
<p>当 $S(\beta_0, \beta_1, \dots,\beta_n)$ 取得最小值时，此时的 $\beta_0, \beta_1, \dots,\beta_n$ 即为回归方程的回归系数，也是最小二乘解。</p>
<a id="more"></a>
<h2 id="u6700_u5C0F_u4E8C_u4E58_u77E9_u9635_u5F62_u5F0F"><a href="#u6700_u5C0F_u4E8C_u4E58_u77E9_u9635_u5F62_u5F0F" class="headerlink" title="最小二乘矩阵形式"></a>最小二乘矩阵形式</h2><p>多组测量数据 $(x_i,y_i),i=1,2,3⋯,m$ 可以构成两个行列式[2]：</p>
<p>$$ X=\begin{bmatrix} x_1 \\ x_2 \\ x_3 \\ \vdots \\ x_m \end{bmatrix}, Y=\begin{bmatrix} y_1 \\ y_2 \\ y_3 \\ \vdots \\ y_m \end{bmatrix} $$</p>
<p>将多组数据代入到回归方程 $f$ 后，可得：</p>
<p>$$<br>Y = \beta_0 + \beta_1 X + \beta_2 X^2 + \dots + \beta_n X^n + \Delta<br>$$</p>
<p>$$<br>\Delta = \begin{bmatrix}<br>\delta_1 \\ \delta_2 \\ \delta_3 \\ \vdots \\ \delta_m<br>\end{bmatrix} , \beta=\begin{bmatrix}<br>\beta_0 \\ \beta_1 \\ \vdots \\ \beta_n<br>\end{bmatrix}<br>$$</p>
<p>再将 X 的转化为范德蒙德行列式：</p>
<p>$$<br>V=\begin{bmatrix}<br>1 &amp; x_1 &amp; x_1^2 &amp; \dots &amp; x_1^{n} \\<br>1 &amp; x_2 &amp; x_2^2 &amp; \dots &amp; x_2^{n} \\<br>1 &amp; x_3 &amp; x_3^2 &amp; \dots &amp; x_3^{n} \\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp;\vdots \\<br>1 &amp; x_m &amp; x_m^2 &amp; \dots &amp; x_m^{n}<br>\end{bmatrix}<br>$$</p>
<p>综上，可得：<br>$$<br>V\beta \approx Y \Rightarrow \Delta = \hat{Y} - Y = V\beta - Y<br>$$</p>
<p>$\hat{Y}$ 为 $\hat{y_i}$构成的列向量。</p>
<p>因为 $\Delta$ 的范数: $\Vert \Delta \Vert = \left( \sum_{i = 1}^m \delta_i^2 \right)^\frac{1}2$，所以求最小二乘解即可转化为如何使 $\Delta$ 的范数最小。</p>
<p>$$<br>\Vert \Delta \Vert^2  = \sum{\delta_i^2}<br>                      = \begin{bmatrix}<br>                         \delta_1 \delta_2 \dots \delta_n<br>                        \end{bmatrix} \begin{bmatrix}\delta_1 \\<br>                                                     \delta_2 \\<br>                                                     \vdots \\<br>                                                     \delta_n<br>                                      \end{bmatrix}<br>                      = \delta^T \delta<br>$$</p>
<p>$$<br>\Vert \Delta \Vert^2 = \Vert Y - V\beta \Vert^2 = \left( Y - V\beta \right)^T\left( Y - V\beta \right)<br>$$</p>
<h2 id="u6700_u5C0F_u4E8C_u4E58_u77E9_u9635_u7B97_u6CD5"><a href="#u6700_u5C0F_u4E8C_u4E58_u77E9_u9635_u7B97_u6CD5" class="headerlink" title="最小二乘矩阵算法"></a>最小二乘矩阵算法</h2><blockquote>
<p>Let the scalar $\alpha$ be defined by<br>$$\alpha = Y^T X$$<br>where Y is n × 1, X is n × 1, and both Y and X are functions of the vector z. Then<br>$$\frac{d(\alpha)}{d(z)} = X^T\frac{d(Y)}{d(z)}+Y^T\frac{d(X)}{d(z)}$$</p>
</blockquote>
<p>根据上面定理，可得：<br>$$<br>\frac{d\Delta}{d\beta} = \frac{d}{d\beta}\left(\left( Y - V\beta \right)^T\left( Y - V\beta \right)\right) = -2V^T\left(Y-V\beta\right)<br>$$</p>
<p>为使 $\Delta$ 最小，可使 $\frac{d\Delta}{d\beta} = 0 \Rightarrow -2V^T\left(Y-V\beta\right) = 0$。</p>
<p>目前常见的算法有三种：Normal equations，QR-Factorization 和 SVD。</p>
<!--
这三个算法应用在计算机中时，有几点需要注意：
 1. 计算机中，浮点数的精度有限，当数过小时，就成0.
 2. 
-->
<!--
TOOD: 
 0. 是否可逆，奇异矩阵
 1. 计算机精度问题
 2. 算法稳定问题
-->
<h3 id="Normal_equations"><a href="#Normal_equations" class="headerlink" title="Normal equations"></a>Normal equations</h3><p>$$<br>\begin{align}<br>-2V^T\left(Y-V\beta\right) &amp;= 0\\<br>V^T V\beta &amp;= V^TY \\<br>\beta &amp;= \left(V^T V\right)^{-1}V^T Y<br>\end{align}<br>$$<br>这个算法的时间复杂度最小，计算 $\beta$ 速度最快。但是在计算机中，浮点数的精度有限，当某些矩阵中的数过小时，就算该矩阵是满秩的非奇异的，但在计算机中，该矩阵就是奇异矩阵。<br>这个问题在 Normal equations 尤为严重[2]。比如下面矩阵 D：<br>$$<br>\begin{align}<br>D &amp;= \begin{bmatrix}<br>1 &amp; 1 \\<br>0 &amp; \delta \\<br>\delta &amp; 0 \\<br>\end{bmatrix}, |\delta| = 1 \times \text{Minimum precision} \\<br>D^T D &amp;= \begin{bmatrix}<br>1+\delta^2 &amp; 1 \\<br>1 &amp; 1+\delta^2<br>\end{bmatrix}<br>\end{align}<br>$$<br>这个算法出现了 $\delta^2$，容易出现奇异矩阵，所以不稳定。</p>
<h3 id="QR-Factorization"><a href="#QR-Factorization" class="headerlink" title="QR-Factorization"></a>QR-Factorization</h3><p>QR-Factorization 要比 Normal equations 稳定。<br>这个算法先把 $V$ 进行 QR 分解[<a href="https://en.wikipedia.org/wiki/QR_decomposition#Using_for_solution_to_linear_inverse_problems" target="_blank" rel="external">3</a>]: $QR = V$<br>$$<br>\begin{align}<br>V^T V \beta &amp;= V^T Y \\<br>(QR)^T Q R \beta &amp;= (Q R)^T Y \\<br>R^T Q^T Q R \beta &amp;= R^T Q^T Y \\<br>R^T R \beta &amp;= R^T Q^T Y \\<br>R\beta &amp;= Q^T Y \\<br>\beta &amp;= R^{-1} Q^T Y<br>\end{align}<br>$$<br>由于 R 是一个上三角矩阵，所以求解很方便。这个也是 Matlab 中<code>polyfit</code>合的算法[2]。</p>
<h2 id="u53C2_u8003_u6587_u732E"><a href="#u53C2_u8003_u6587_u732E" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote>
<p>[1] Chatterjee, Samprit, Ali S. Hadi, and Bertram Price. 2000. Regression analysis by example. New York: Wiley.</p>
<p>[2] Moler, Cleve B. Numerical Computing with MATLAB: Revised Reprint. Siam, 2008.</p>
<p>[3] Wikipedia contributors, “QR decomposition,” Wikipedia, The Free Encyclopedia, <a href="https://en.wikipedia.org/wiki/QR_decomposition#Using_for_solution_to_linear_inverse_problems" target="_blank" rel="external">https://en.wikipedia.org/wiki/QR_decomposition#Using_for_solution_to_linear_inverse_problems</a> (accessed November 23, 2015).</p>
</blockquote>
<!-- Links -->
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u62DF_u5408_u66F2_u7EBF_u4E0E_u6700_u5C0F_u4E8C_u4E58_u6CD5"><a href="#u62DF_u5408_u66F2_u7EBF_u4E0E_u6700_u5C0F_u4E8C_u4E58_u6CD5" class="headerlink" title="拟合曲线与最小二乘法"></a>拟合曲线与最小二乘法</h2><p>曲线拟合指：已知 m 个数据点 $(x_i,y_i ),i=1,2,3⋯,m$ 其中 m 不全相同，寻求函数 $f(x; \beta_0, \beta_1, \dots, \beta_n)$ 的待定参数 $\beta_0, \beta_1, \dots, \beta_n$ 的一组取值，使得在这组取值之下，函数 $f(x; \beta_0, \beta_1, \dots,\beta_n)$ 与已知 m 个数据点整体上最为接近。</p>
<p>最小二乘曲线拟合方法：根据已知数据，首先构造出能够反映含有回归参数的回归方程 $f(x; \beta_i),i = 0, 1, 2, …, n$ :</p>
<p>$$<br>\begin{align}<br>\hat{y} &amp;= \beta_0 + \beta_1 x + \beta_2 x^2 + \dots + \beta_n x^n \\<br>y &amp;= \hat{y} + \delta<br>\end{align}<br>$$</p>
<p>$\delta$ 是残差，这是回归方程与真实值存在出入的原因[1]。</p>
<p>根据 m 个数据点 $(x_i, y_i),i=1,2,3⋯,m$ 可以定义一个代表偏离程度的函数:</p>
<p>$$<br>S(\beta_0, \beta_1, \dots, \beta_n) = \sum_{j = 1}^m [y_i - f(x; \beta_0, \beta_1, \dots,\beta_n)]^2 = \sum \delta<br>$$</p>
<p>当 $S(\beta_0, \beta_1, \dots,\beta_n)$ 取得最小值时，此时的 $\beta_0, \beta_1, \dots,\beta_n$ 即为回归方程的回归系数，也是最小二乘解。</p>]]>
    
    </summary>
    
      <category term="Matlab" scheme="http://neilsh.me/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解除尔雅公开课暂停]]></title>
    <link href="http://neilsh.me/2015/11/29/erya-no-pause/"/>
    <id>http://neilsh.me/2015/11/29/erya-no-pause/</id>
    <published>2015-11-29T14:04:04.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6076_u5FC3_u7684_u6682_u505C"><a href="#u6076_u5FC3_u7684_u6682_u505C" class="headerlink" title="恶心的暂停"></a>恶心的暂停</h2><p>这学期，我参加了尔雅公开课，要完成公开课必须先看完课程视频，但是在看视频的时候，尔雅会限制电脑的当前窗口必须为浏览器，否则暂停。本来公开课要求看完视频，这并不过分，但是非要加上这么个限制，我的黑客心就不安份了。 :-P</p>
<h2 id="u8FC7_u7A0B"><a href="#u8FC7_u7A0B" class="headerlink" title="过程"></a>过程</h2><p>对于尔雅的这个限制，我的第一反应是 js 事件监听。js 的事件这么多，难道要一个个翻过去吗？NO, NO, NO. 去年火狐推出的新功能[<a href="https://hacks.mozilla.org/2014/07/event-listeners-popup-media-sidebar-cubic-bezier-editor-more-firefox-developer-tools-episode-33/" target="_blank" rel="external">1</a>]，使查看 js 事件监听变得极为容易。两三下功夫就找到了一个可以的事件，见下图：<br><a id="more"></a><br><img src="http://ww2.sinaimg.cn/large/7f793092gw1eyp26kv1jpj20v50cxtd8.jpg" alt=""><br>这个函数中的<code>pauseMovie()</code>基本就确定是这个搞得鬼了。为了进一步确定，我在 console 输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#eryaPlayer'</span>).pauseMovie();</span><br></pre></td></tr></table></figure></p>
<p>视频就暂停了。</p>
<p><img src="http://ww1.sinaimg.cn/large/7f793092gw1eyp1u6wek1j20ga0c40v5.jpg" alt=""></p>
<p>再输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onblur = <span class="literal">null</span></span><br></pre></td></tr></table></figure></p>
<p>上面命令执行完之后，暂停的限制就解除了。 LOL</p>
<h2 id="u811A_u672C"><a href="#u811A_u672C" class="headerlink" title="脚本"></a>脚本</h2><p>我并没有学过 js，只能照葫芦画瓢，根据官方文档来写[<a href="http://wiki.greasespot.net/Greasemonkey_Manual" target="_blank" rel="external">2</a>]。如果哪里出错或写的不好，欢迎提出来。</p>
<p>Firefox + Greasemonkey[<a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/" target="_blank" rel="external">3</a>]，把脚本拖入浏览器即使用。</p>
<script src="https://gist.github.com/Overvenus/c41a34f7e039b9207210.js"></script>


<h2 id="u5DF2_u77E5_u95EE_u9898"><a href="#u5DF2_u77E5_u95EE_u9898" class="headerlink" title="已知问题"></a>已知问题</h2><ol>
<li>无法去除随机暂停及验证码暂停。</li>
<li>Chrome 无法使用。</li>
</ol>
<h2 id="u94FE_u63A5"><a href="#u94FE_u63A5" class="headerlink" title="链接"></a>链接</h2><blockquote>
<p>[1]: <a href="https://hacks.mozilla.org/2014/07/event-listeners-popup-media-sidebar-cubic-bezier-editor-more-firefox-developer-tools-episode-33/" target="_blank" rel="external">Event listeners popup, @media sidebar, Cubic bezier editor + more – Firefox Developer Tools Episode 33</a></p>
<p>[2]: <a href="http://wiki.greasespot.net/Greasemonkey_Manual" target="_blank" rel="external">Greasemonkey Manual - GreaseSpot Wiki</a></p>
<p>[3]: <a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/" target="_blank" rel="external">Greasemonkey :: Add-ons for Firefox</a></p>
</blockquote>
<p>End.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6076_u5FC3_u7684_u6682_u505C"><a href="#u6076_u5FC3_u7684_u6682_u505C" class="headerlink" title="恶心的暂停"></a>恶心的暂停</h2><p>这学期，我参加了尔雅公开课，要完成公开课必须先看完课程视频，但是在看视频的时候，尔雅会限制电脑的当前窗口必须为浏览器，否则暂停。本来公开课要求看完视频，这并不过分，但是非要加上这么个限制，我的黑客心就不安份了。 :-P</p>
<h2 id="u8FC7_u7A0B"><a href="#u8FC7_u7A0B" class="headerlink" title="过程"></a>过程</h2><p>对于尔雅的这个限制，我的第一反应是 js 事件监听。js 的事件这么多，难道要一个个翻过去吗？NO, NO, NO. 去年火狐推出的新功能[<a href="https://hacks.mozilla.org/2014/07/event-listeners-popup-media-sidebar-cubic-bezier-editor-more-firefox-developer-tools-episode-33/">1</a>]，使查看 js 事件监听变得极为容易。两三下功夫就找到了一个可以的事件，见下图：<br>]]>
    
    </summary>
    
      <category term="Hacking" scheme="http://neilsh.me/tags/Hacking/"/>
    
      <category term="JavaScript" scheme="http://neilsh.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[paxos-digest]]></title>
    <link href="http://neilsh.me/2015/11/25/paxos_digest/"/>
    <id>http://neilsh.me/2015/11/25/paxos_digest/</id>
    <published>2015-11-25T11:25:23.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h2><p>Paxos is one of the most important algorithms in distributed system.[<a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf" target="_blank" rel="external">1</a>]<br>Here are some notes about Basic Paxos.</p>
<h2 id="Three_roles_in_Paxos"><a href="#Three_roles_in_Paxos" class="headerlink" title="Three roles in Paxos"></a>Three roles in Paxos</h2><ol>
<li>Proposers</li>
<li>Acceptor</li>
<li>Learners</li>
</ol>
<p>General view:  <strong><em>Proposers</em></strong> send proposals to <strong><em>Acceptors</em></strong>, <strong><em>Acceptors</em></strong> accept a proposal and forward to <strong><em>Learners</em></strong>, <strong><em>Learners</em></strong> decided the proposal.<br>In real world, a single server acts <strong>two or more</strong> roles.</p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ol>
<li>An acceptor must accept the first proposal that it receives.<br>1a. An acceptor can accept a proposal numbered n iff it has not responded to a prepare request having a number greater than n.</li>
<li>If a proposal with value v is chosen, then every higher-numbered proposal that is chosen has value v.<br>2a. If a proposal with value v is chosen, then every higher-numbered proposal accepted by any acceptor has value v.<br>2b. If a proposal with value v is chosen, then every higher-numbered proposal issued by any proposer has value v.<br>2c. For any v and n, if a proposal with value v and number n is issued, then there is a set S consisting of a majority of acceptors such that either (a) no acceptor in S has accepted any proposal numbered less than n, or (b) v is the value of the highest-numbered proposal among all proposals numbered less than n accepted by the acceptors in S.</li>
</ol>
<p>1a is stronger then 1, and 2c =&gt; 2b =&gt; 2a =&gt; 2.<br><a id="more"></a></p>
<h2 id="RPCs_and_Phases"><a href="#RPCs_and_Phases" class="headerlink" title="RPCs and Phases"></a>RPCs and Phases</h2><p>Proposers send two kinds of RPC to <strong>majority</strong> Acceptors.</p>
<ol>
<li><em>Prepare</em>, send with a uniqe proposal number n.</li>
<li><em>Accept</em>, send with a uniqe proposal number n and proposal value v.</li>
</ol>
<p>There are two phases in Paxos.</p>
<ol>
<li>Phase 1: broadcast <em>Prepare</em> RPC</li>
<li>Phase 2: broadcasr <em>Accept</em> RPC</li>
</ol>
<p>Majority is the key to achieve consensus and correctness.</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Each server plays all roles (proposer, acceptor, and learner) in each instance of the algorithm. In normal operation, a single server is elected to be the <strong>leader</strong>, which acts as the distinguished proposer (the <strong>only one</strong> that tries to issue proposals) in all instances of the consensus algorithm.</p>
<h2 id="Pseudo_code"><a href="#Pseudo_code" class="headerlink" title="Pseudo code"></a>Pseudo code</h2><p>Handout of 6.824, Spring 2015 [<a href="http://nil.csail.mit.edu/6.824/2015/notes/paxos-code.html" target="_blank" rel="external">2</a>]</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">--- Paxos Proposer ---</span><br><span class="line"></span><br><span class="line">proposer(v):</span><br><span class="line">  <span class="keyword">while</span> not decided:</span><br><span class="line">    choose <span class="keyword">n</span>, unique and higher than any <span class="keyword">n</span> seen <span class="keyword">so</span> far</span><br><span class="line">    send prepare(<span class="keyword">n</span>) to all servers including self</span><br><span class="line">    <span class="keyword">if</span> prepare_ok(<span class="keyword">n</span>, na, va) from majority:       --- na and nv is proposal number and value (<span class="keyword">if</span> any) that acceptor has accepted.</span><br><span class="line">      v' = va with highest na; choose own v otherwise   </span><br><span class="line">      send accept(<span class="keyword">n</span>, v') to all</span><br><span class="line">      <span class="keyword">if</span> accept_ok(<span class="keyword">n</span>) from majority:              --- Paxos Learner ---</span><br><span class="line">        send decided(v') to all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Paxos Acceptor ---</span><br><span class="line"></span><br><span class="line">acceptor state <span class="keyword">on</span> each node (persistent):</span><br><span class="line"> np     --- highest prepare seen</span><br><span class="line"> na, va --- highest accept seen</span><br><span class="line"></span><br><span class="line">acceptor's prepare(<span class="keyword">n</span>) handler:</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">n</span> &gt; np</span><br><span class="line">   np = <span class="keyword">n</span></span><br><span class="line">   reply prepare_ok(<span class="keyword">n</span>, na, va)</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">   reply prepare_reject</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">acceptor's accept(<span class="keyword">n</span>, v) handler:</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">n</span> &gt;= np</span><br><span class="line">   np = <span class="keyword">n</span></span><br><span class="line">   na = <span class="keyword">n</span></span><br><span class="line">   va = v</span><br><span class="line">   reply accept_ok(<span class="keyword">n</span>)</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">   reply accept_reject</span><br></pre></td></tr></table></figure>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Servers and proposal vaule: S1(X)<br>Prepare: P,1<br>Accept: A,1,X</p>
<h3 id="E-g-_1"><a href="#E-g-_1" class="headerlink" title="E.g. 1"></a>E.g. 1</h3><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S<span class="number">1</span>(<span class="keyword">X</span>)    <span class="keyword">P</span>,<span class="number">1</span>    A,<span class="number">1</span>,<span class="keyword">X</span></span><br><span class="line">S<span class="number">2</span></span><br><span class="line">S<span class="number">3</span>       <span class="keyword">P</span>,<span class="number">1</span>    A,<span class="number">1</span>,<span class="keyword">X</span></span><br><span class="line">                    ^ chosen</span><br></pre></td></tr></table></figure>
<p>X is chosen.</p>
<h3 id="E-g-_2"><a href="#E-g-_2" class="headerlink" title="E.g. 2"></a>E.g. 2</h3><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S<span class="number">1</span>(<span class="keyword">X</span>)    <span class="keyword">P</span>,<span class="number">1</span>    A,<span class="number">1</span>,<span class="keyword">X</span></span><br><span class="line">S<span class="number">2</span>       <span class="keyword">P</span>,<span class="number">1</span>    A,<span class="number">1</span>,<span class="keyword">X</span>    <span class="keyword">P</span>,<span class="number">3</span>    A,<span class="number">3</span>,<span class="keyword">X</span></span><br><span class="line">S<span class="number">3</span>(<span class="keyword">Y</span>)                    <span class="keyword">P</span>,<span class="number">3</span>    A,<span class="number">3</span>,<span class="keyword">X</span></span><br><span class="line">                    ^ chosen</span><br></pre></td></tr></table></figure>
<p>X is chosen.<br>S2 response <code>P,3</code> with <code>1,X</code>, S3 send proposal value X instead of Y.</p>
<h3 id="E-g-_3"><a href="#E-g-_3" class="headerlink" title="E.g. 3"></a>E.g. 3</h3><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S<span class="number">1</span>(<span class="keyword">X</span>)    <span class="keyword">P</span>,<span class="number">1</span>    A,<span class="number">1</span>,<span class="keyword">X</span></span><br><span class="line">S<span class="number">2</span>       <span class="keyword">P</span>,<span class="number">1</span>             <span class="keyword">P</span>,<span class="number">3</span>    A,<span class="number">3</span>,<span class="keyword">Y</span>    A,<span class="number">1</span>,<span class="keyword">X</span>(rej)</span><br><span class="line">S<span class="number">3</span>(<span class="keyword">Y</span>)                    <span class="keyword">P</span>,<span class="number">3</span>    A,<span class="number">3</span>,<span class="keyword">Y</span></span><br><span class="line">                                    ^ chosen</span><br></pre></td></tr></table></figure>
<p>Y is chosen.<br><code>A,1,X</code> is rejected, because 3 &gt; 1.</p>
<h3 id="E-g-_4"><a href="#E-g-_4" class="headerlink" title="E.g. 4"></a>E.g. 4</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">S1</span><span class="params">(X)</span></span>    P,<span class="number">1</span>    A,<span class="number">1</span>,X                                  A,<span class="number">3</span>,<span class="function"><span class="title">Y</span><span class="params">(rej)</span></span></span><br><span class="line">S2       P,<span class="number">1</span>             P,<span class="number">3</span>             A,<span class="number">1</span>,<span class="function"><span class="title">X</span><span class="params">(rej)</span></span>    A,<span class="number">3</span>,Y</span><br><span class="line"><span class="function"><span class="title">S3</span><span class="params">(Y)</span></span>                    P,<span class="number">3</span>    A,<span class="number">3</span>,Y    A,<span class="number">1</span>,<span class="function"><span class="title">X</span><span class="params">(rej)</span></span>    </span><br><span class="line">                                                           ^ chosen</span><br></pre></td></tr></table></figure>
<p>Y is chosen.<br>Later, Learner will find out Y is the chosen value, and then send decided(Y) to all servers.</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><blockquote>
<p>[1]. <a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf" target="_blank" rel="external">Lamport, Leslie. “Paxos made simple.” ACM Sigact News 32, no. 4 (2001): 18-25.</a><br>[2]. <a href="http://nil.csail.mit.edu/6.824/2015/notes/paxos-code.html" target="_blank" rel="external">Handout, LEC5, 6.824</a><br>[3]. <a href="https://www.youtube.com/watch?v=JEpsBg0AO6o" target="_blank" rel="external">Paxos lecture (Raft user study)</a></p>
</blockquote>
<p>end.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h2><p>Paxos is one of the most important algorithms in distributed system.[<a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf">1</a>]<br>Here are some notes about Basic Paxos.</p>
<h2 id="Three_roles_in_Paxos"><a href="#Three_roles_in_Paxos" class="headerlink" title="Three roles in Paxos"></a>Three roles in Paxos</h2><ol>
<li>Proposers</li>
<li>Acceptor</li>
<li>Learners</li>
</ol>
<p>General view:  <strong><em>Proposers</em></strong> send proposals to <strong><em>Acceptors</em></strong>, <strong><em>Acceptors</em></strong> accept a proposal and forward to <strong><em>Learners</em></strong>, <strong><em>Learners</em></strong> decided the proposal.<br>In real world, a single server acts <strong>two or more</strong> roles.</p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ol>
<li>An acceptor must accept the first proposal that it receives.<br>1a. An acceptor can accept a proposal numbered n iff it has not responded to a prepare request having a number greater than n.</li>
<li>If a proposal with value v is chosen, then every higher-numbered proposal that is chosen has value v.<br>2a. If a proposal with value v is chosen, then every higher-numbered proposal accepted by any acceptor has value v.<br>2b. If a proposal with value v is chosen, then every higher-numbered proposal issued by any proposer has value v.<br>2c. For any v and n, if a proposal with value v and number n is issued, then there is a set S consisting of a majority of acceptors such that either (a) no acceptor in S has accepted any proposal numbered less than n, or (b) v is the value of the highest-numbered proposal among all proposals numbered less than n accepted by the acceptors in S.</li>
</ol>
<p>1a is stronger then 1, and 2c =&gt; 2b =&gt; 2a =&gt; 2.<br>]]>
    
    </summary>
    
      <category term="Algorithms" scheme="http://neilsh.me/tags/Algorithms/"/>
    
      <category term="Distributed System" scheme="http://neilsh.me/tags/Distributed-System/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[make slice map channel]]></title>
    <link href="http://neilsh.me/2015/11/09/make_slice_map_channel/"/>
    <id>http://neilsh.me/2015/11/09/make_slice_map_channel/</id>
    <published>2015-11-09T07:16:55.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Where_is_the_make_implemention_3F"><a href="#Where_is_the_make_implemention_3F" class="headerlink" title="Where is the make implemention?"></a>Where is the make implemention?</h2><p>package <strong>runtime</strong><br>By the way, <em>new</em>, <em>map</em>, <em>slice</em>, <em>channel</em>, <em>goroutine</em> and <em>garbage collector</em>[<a href="https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF7WWLux71CYD0eeD8" target="_blank" rel="external">1</a>] are also implemented in this package.</p>
<h2 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h2><p>Source file: go/src/runtime/slice.go</p>
<h3 id="Data_structure"><a href="#Data_structure" class="headerlink" title="Data structure"></a>Data structure</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">    array unsafe.Pointer</span><br><span class="line">    <span class="built_in">len</span>   <span class="typename">int</span></span><br><span class="line">    <span class="built_in">cap</span>   <span class="typename">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Underlying data structure of <strong>slice</strong> is trival. Go is statically typed, and why this litte struct can be the template of any type of slices? Well, look at the comments of <code>unsafe.Pointer</code></p>
<blockquote>
<p>// Pointer represents a pointer to an arbitrary type.  There are four special operations<br>// available for type Pointer that are not available for other types.<br>//  1) A pointer value of any type can be converted to a Pointer.<br>//  2) A Pointer can be converted to a pointer value of any type.  &lt;– here!<br>//  3) A uintptr can be converted to a Pointer.<br>//  4) A Pointer can be converted to a uintptr.<br>// Pointer therefore allows a program to defeat the type system and read and write<br>// arbitrary memory. It should be used with extreme care.</p>
</blockquote>
<p>In my opinion, <strong>Pointer</strong> in Go and <strong>*void</strong> in C are very like. <em>Pointer</em> anesthetizes the type system and read and write arbitrary memory in Go. <em>*void</em> can be converted to any type without warning in C.</p>
<a id="more"></a>
<h3 id="Make_slices"><a href="#Make_slices" class="headerlink" title="Make slices"></a>Make slices</h3><p>Make slices is trival.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span>: take uintptrs instead of int64s?</span></span><br><span class="line"><span class="keyword">func</span> makeslice(t *slicetype, len64, cap64 <span class="typename">int64</span>) slice &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">NOTE</span></span>: The len &gt; MaxMem/elemsize check here is not strictly necessary,</span></span><br><span class="line">    <span class="comment">// but it produces a 'len out of range' error instead of a 'cap out of range' error</span></span><br><span class="line">    <span class="comment">// when someone does make([]T, bignumber). 'cap out of range' is true too,</span></span><br><span class="line">    <span class="comment">// but since the cap is only being supplied implicitly, saying len is clearer.</span></span><br><span class="line">    <span class="comment">// See issue 4085.</span></span><br><span class="line">    <span class="built_in">len</span> := <span class="typename">int</span>(len64)</span><br><span class="line">    <span class="keyword">if</span> len64 &lt; <span class="number">0</span> || <span class="typename">int64</span>(<span class="built_in">len</span>) != len64 || t.elem.size &gt; <span class="number">0</span> &amp;&amp; <span class="typename">uintptr</span>(<span class="built_in">len</span>) &gt; _MaxMem/<span class="typename">uintptr</span>(t.elem.size) &#123;</span><br><span class="line">        <span class="built_in">panic</span>(errorString(<span class="string">"makeslice: len out of range"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cap</span> := <span class="typename">int</span>(cap64)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">cap</span> &lt; <span class="built_in">len</span> || <span class="typename">int64</span>(<span class="built_in">cap</span>) != cap64 || t.elem.size &gt; <span class="number">0</span> &amp;&amp; <span class="typename">uintptr</span>(<span class="built_in">cap</span>) &gt; _MaxMem/<span class="typename">uintptr</span>(t.elem.size) &#123;</span><br><span class="line">        <span class="built_in">panic</span>(errorString(<span class="string">"makeslice: cap out of range"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    p := newarray(t.elem, <span class="typename">uintptr</span>(<span class="built_in">cap</span>))</span><br><span class="line">    <span class="keyword">return</span> slice&#123;p, <span class="built_in">len</span>, <span class="built_in">cap</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So, a slice is always 24 bytes(amd64, ubuntu 14.04 LTS), no matter how many elements it has or how much capacity it is. The actual data that a slice represents locate in other place, not in the slice itself. More details about slice can be found in [<a href="https://gist.github.com/Overvenus/f6cf225ec33cc98d6b8c" target="_blank" rel="external">3</a>] and [<a href="https://blog.golang.org/go-slices-usage-and-internals" target="_blank" rel="external">4</a>].</p>
<p><strong>newarray</strong> eventually calls <strong>mallocgc</strong>, which will allocate memory in heap(for big array) or per-thread cache (for small array) [<a href="http://goog-perftools.sourceforge.net/doc/tcmalloc.html" target="_blank" rel="external">2</a>].</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// implementation of make builtin for slices</span></span><br><span class="line"><span class="keyword">func</span> newarray(typ *_type, n <span class="typename">uintptr</span>) unsafe.Pointer &#123;</span><br><span class="line">    flags := <span class="typename">uint32</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> typ.kind&amp;kindNoPointers != <span class="number">0</span> &#123;</span><br><span class="line">        flags |= flagNoScan</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="typename">int</span>(n) &lt; <span class="number">0</span> || (typ.size &gt; <span class="number">0</span> &amp;&amp; n &gt; _MaxMem/<span class="typename">uintptr</span>(typ.size)) &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"runtime: allocation size out of range"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mallocgc(<span class="typename">uintptr</span>(typ.size)*n, typ, flags)</span><br><span class="line">    <span class="comment">/*                               ^^  multiply size by n  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>Source file: go/src/runtime/hashmap.go</p>
<blockquote>
<p>// A map is just a hash table.  The data is arranged<br>// into an array of buckets.  Each bucket contains up to<br>// 8 key/value pairs.  The low-order bits of the hash are<br>// used to select a bucket.  Each bucket contains a few<br>// high-order bits of each hash to distinguish the entries<br>// within a single bucket.<br>//<br>// If more than 8 keys hash to a bucket, we chain on<br>// extra buckets.</p>
</blockquote>
<h3 id="Data_structure-1"><a href="#Data_structure-1" class="headerlink" title="Data structure"></a>Data structure</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A header for a Go map.</span></span><br><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Note: the format of the Hmap is encoded in ../../cmd/internal/gc/reflect.go and</span></span><br><span class="line">    <span class="comment">// ../reflect/type.go.  Don't change this structure without also changing that code!</span></span><br><span class="line">    count <span class="typename">int</span> <span class="comment">// # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class="line">    flags <span class="typename">uint8</span></span><br><span class="line">    B     <span class="typename">uint8</span>  <span class="comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class="line">    hash0 <span class="typename">uint32</span> <span class="comment">// hash seed</span></span><br><span class="line"></span><br><span class="line">    buckets    unsafe.Pointer <span class="comment">// array of 2^B Buckets. may be nil if count==0.</span></span><br><span class="line">    oldbuckets unsafe.Pointer <span class="comment">// previous bucket array of half the size, non-nil only when growing</span></span><br><span class="line">    nevacuate  <span class="typename">uintptr</span>        <span class="comment">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If both key and value do not contain pointers and are inline, then we mark bucket</span></span><br><span class="line">    <span class="comment">// type as containing no pointers. This avoids scanning such maps.</span></span><br><span class="line">    <span class="comment">// However, bmap.overflow is a pointer. In order to keep overflow buckets</span></span><br><span class="line">    <span class="comment">// alive, we store pointers to all overflow buckets in hmap.overflow.</span></span><br><span class="line">    <span class="comment">// Overflow is used only if key and value do not contain pointers.</span></span><br><span class="line">    <span class="comment">// overflow[0] contains overflow buckets for hmap.buckets.</span></span><br><span class="line">    <span class="comment">// overflow[1] contains overflow buckets for hmap.oldbuckets.</span></span><br><span class="line">    <span class="comment">// The first indirection allows us to reduce static size of hmap.</span></span><br><span class="line">    <span class="comment">// The second indirection allows to store a pointer to the slice in hiter.</span></span><br><span class="line">    overflow *[<span class="number">2</span>]*[]*bmap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A bucket for a Go map.</span></span><br><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    tophash [bucketCnt]<span class="typename">uint8</span></span><br><span class="line">    <span class="comment">// Followed by bucketCnt keys and then bucketCnt values.</span></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">NOTE</span></span>: packing all the keys together and then all the values together makes the</span></span><br><span class="line">    <span class="comment">// code a bit more complicated than alternating key/value/key/value/... but it allows</span></span><br><span class="line">    <span class="comment">// us to eliminate padding which would be needed for, e.g., map[int64]int8.</span></span><br><span class="line">    <span class="comment">// Followed by an overflow pointer.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Make_maps"><a href="#Make_maps" class="headerlink" title="Make maps"></a>Make maps</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// makemap implements a Go map creation make(map[k]v, hint)</span></span><br><span class="line"><span class="comment">// If the compiler has determined that the map or the first bucket</span></span><br><span class="line"><span class="comment">// can be created on the stack, h and/or bucket may be non-nil.</span></span><br><span class="line"><span class="comment">// If h != nil, the map can be created directly in h.</span></span><br><span class="line"><span class="comment">// If bucket != nil, bucket can be used as the first bucket.</span></span><br><span class="line"><span class="keyword">func</span> makemap(t *maptype, hint <span class="typename">int64</span>, h *hmap, bucket unsafe.Pointer) *hmap &#123;</span><br><span class="line">    <span class="keyword">if</span> !ismapkey(t.key) &#123;                             <span class="comment">/* pointer --&gt; ^^^^^ */</span></span><br><span class="line">        throw(<span class="string">"runtime.makemap: unsupported map key type"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* I delete some checks */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// make sure zeroptr is large enough</span></span><br><span class="line">    mapzero(t.elem)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find size parameter which will hold the requested # of elements</span></span><br><span class="line">    B := <span class="typename">uint8</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> ; hint &gt; bucketCnt &amp;&amp; <span class="typename">float32</span>(hint) &gt; loadFactor*<span class="typename">float32</span>(<span class="typename">uintptr</span>(<span class="number">1</span>)&lt;&lt;B); B++ &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allocate initial hash table</span></span><br><span class="line">    <span class="comment">// if B == 0, the buckets field is allocated lazily later (in mapassign)</span></span><br><span class="line">    <span class="comment">// If hint is large zeroing this memory could take a while.</span></span><br><span class="line">    buckets := bucket</span><br><span class="line">    <span class="keyword">if</span> B != <span class="number">0</span> &#123;</span><br><span class="line">        buckets = newarray(t.bucket, <span class="typename">uintptr</span>(<span class="number">1</span>)&lt;&lt;B)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize Hmap</span></span><br><span class="line">    <span class="keyword">if</span> h == <span class="constant">nil</span> &#123;</span><br><span class="line">        h = (*hmap)(newobject(t.hmap))  <span class="comment">/*  */</span></span><br><span class="line">    &#125;</span><br><span class="line">    h.count = <span class="number">0</span></span><br><span class="line">    h.B = B</span><br><span class="line">    h.flags = <span class="number">0</span></span><br><span class="line">    h.hash0 = fastrand1()</span><br><span class="line">    h.buckets = buckets</span><br><span class="line">    h.oldbuckets = <span class="constant">nil</span></span><br><span class="line">    h.nevacuate = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A map is always 8 bytes(amd64, ubuntu 14.04 LTS), because <code>makemap</code> returns a poniter, ponites to hmap, the underlying data sturcture is allocated in heap.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// implementation of new builtin</span></span><br><span class="line"><span class="keyword">func</span> newobject(typ *_type) unsafe.Pointer &#123;</span><br><span class="line">    flags := <span class="typename">uint32</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> typ.kind&amp;kindNoPointers != <span class="number">0</span> &#123;</span><br><span class="line">        flags |= flagNoScan</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mallocgc(<span class="typename">uintptr</span>(typ.size), typ, flags)</span><br><span class="line">    <span class="comment">/* compares with newarray, no multiplication */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It is worth nothing that <code>v, ok := map[k]</code> and <code>v := map[k]</code> are also implemented in this file.</p>
<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>source file: go/src/runtime/channel.go</p>
<h3 id="Data_structure-2"><a href="#Data_structure-2" class="headerlink" title="Data structure"></a>Data structure</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hchan <span class="keyword">struct</span> &#123;</span><br><span class="line">    qcount   <span class="typename">uint</span>           <span class="comment">// total data in the queue</span></span><br><span class="line">    dataqsiz <span class="typename">uint</span>           <span class="comment">// size of the circular queue</span></span><br><span class="line">    buf      unsafe.Pointer <span class="comment">// points to an array of dataqsiz elements</span></span><br><span class="line">    elemsize <span class="typename">uint16</span></span><br><span class="line">    closed   <span class="typename">uint32</span></span><br><span class="line">    elemtype *_type <span class="comment">// element type</span></span><br><span class="line">    sendx    <span class="typename">uint</span>   <span class="comment">// send index</span></span><br><span class="line">    recvx    <span class="typename">uint</span>   <span class="comment">// receive index</span></span><br><span class="line">    recvq    waitq  <span class="comment">// list of recv waiters</span></span><br><span class="line">    sendq    waitq  <span class="comment">// list of send waiters</span></span><br><span class="line">    lock     mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Make_chan"><a href="#Make_chan" class="headerlink" title="Make chan"></a>Make chan</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">makechan</span><span class="params">(t *chantype, size int64)</span></span> *hchan &#123;</span><br><span class="line">    elem := t.elem</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* I delete some checks */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">c</span> *hchan</span><br><span class="line">    <span class="keyword">if</span> elem.kind&amp;kindNoPointers != <span class="number">0</span> || size == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Allocate memory in one call.</span></span><br><span class="line">        <span class="comment">// Hchan does not contain pointers interesting for GC in this case:</span></span><br><span class="line">        <span class="comment">// buf points into the same allocation, elemtype is persistent.</span></span><br><span class="line">        <span class="comment">// SudoG's are referenced from their owning thread so they can't be collected.</span></span><br><span class="line">        <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span>(dvyukov,rlh): Rethink when collector can move allocated objects.</span></span><br><span class="line">        <span class="built_in">c</span> = (*hchan)(mallocgc(hchanSize+uintptr(size)*uintptr(elem.size), <span class="literal">nil</span>, flagNoScan))</span><br><span class="line">        <span class="keyword">if</span> size &gt; <span class="number">0</span> &amp;&amp; elem.size != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">c</span>.buf = add(<span class="keyword">unsafe</span>.<span class="type">Pointer</span>(<span class="built_in">c</span>), hchanSize)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// race detector uses this location for synchronization</span></span><br><span class="line">            <span class="comment">// Also prevents us from pointing beyond the allocation (see issue 9401).</span></span><br><span class="line">            <span class="built_in">c</span>.buf = <span class="keyword">unsafe</span>.<span class="type">Pointer</span>(<span class="built_in">c</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">c</span> = <span class="keyword">new</span>(hchan)</span><br><span class="line">        <span class="built_in">c</span>.buf = newarray(elem, uintptr(size))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">c</span>.elemsize = uint16(elem.size)</span><br><span class="line">    <span class="built_in">c</span>.elemtype = elem</span><br><span class="line">    <span class="built_in">c</span>.dataqsiz = uint(size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debugChan &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"makechan: chan="</span>, <span class="built_in">c</span>, <span class="string">"; elemsize="</span>, elem.size, <span class="string">"; elemalg="</span>, elem.alg, <span class="string">"; dataqsiz="</span>, size, <span class="string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A channel variable at runtime(not package) is very much like a map variable, they are both pointers, pointes to heap.</p>
<h2 id="Make_gist"><a href="#Make_gist" class="headerlink" title="Make gist"></a>Make gist</h2><p>I wrote a gist to uncover slice, map and channel at runtime(not package)<a href="http://goog-perftools.sourceforge.net/doc/tcmalloc.html" target="_blank" rel="external">2</a>.</p>
<script src="https://gist.github.com/Overvenus/f6cf225ec33cc98d6b8c.js"></script>

<h3 id="Outputs_in_my_laptop"><a href="#Outputs_in_my_laptop" class="headerlink" title="Outputs in my laptop"></a>Outputs in my laptop</h3><p>Env: Ubuntu 14.04 LTS, amd64</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ go run make.go</span><br><span class="line">GOOS linux</span><br><span class="line">GOARCH amd64</span><br><span class="line">--- array &amp; slice ---</span><br><span class="line"><span class="string">si:</span> <span class="string">type:</span> [<span class="number">100</span>]<span class="typename">int</span></span><br><span class="line"><span class="string">si:</span> <span class="string">sizeof:</span> <span class="number">800</span></span><br><span class="line"><span class="string">si:</span> address <span class="number">1</span>st ele.: <span class="number">0xc820062380</span></span><br><span class="line">---</span><br><span class="line"><span class="string">asi:</span>    <span class="string">type:</span> *[<span class="number">100</span>]<span class="typename">int</span></span><br><span class="line"><span class="string">asi:</span>    <span class="string">sizeof:</span> <span class="number">8</span></span><br><span class="line"><span class="string">asi:</span>    <span class="string">address:</span> <span class="number">0xc820062380</span></span><br><span class="line"><span class="string">asi:</span>    address <span class="number">1</span>st ele.: <span class="number">0xc820062380</span></span><br><span class="line">---</span><br><span class="line">si[:<span class="number">20</span>]:    <span class="string">type:</span> []<span class="typename">int</span></span><br><span class="line">si[:<span class="number">20</span>]:    <span class="string">sizeof:</span> <span class="number">24</span></span><br><span class="line">si[:<span class="number">20</span>]:    address <span class="number">1</span>st ele.: <span class="number">0xc820062380</span></span><br><span class="line">---</span><br><span class="line">si[:<span class="number">80</span>]:    <span class="string">type:</span> []<span class="typename">int</span></span><br><span class="line">si[:<span class="number">80</span>]:    <span class="string">sizeof:</span> <span class="number">24</span></span><br><span class="line">si[:<span class="number">80</span>]:    address <span class="number">1</span>st ele.: <span class="number">0xc820062380</span></span><br><span class="line">---</span><br><span class="line"><span class="string">assi:</span>   <span class="string">type:</span> *[]<span class="typename">int</span></span><br><span class="line"><span class="string">assi:</span>   <span class="string">sizeof:</span> <span class="number">8</span></span><br><span class="line"><span class="string">assi:</span>   <span class="string">address:</span> <span class="number">0xc8200105e0</span></span><br><span class="line">--- map ---</span><br><span class="line"><span class="string">m:</span>  <span class="string">type:</span> map[<span class="typename">int</span>]<span class="typename">int</span></span><br><span class="line"><span class="string">m:</span>  <span class="string">sizeof:</span> <span class="number">8</span></span><br><span class="line">---</span><br><span class="line"><span class="string">am:</span> <span class="string">type:</span> *map[<span class="typename">int</span>]<span class="typename">int</span></span><br><span class="line"><span class="string">am:</span> <span class="string">sizeof:</span> <span class="number">8</span></span><br><span class="line">--- channel ---</span><br><span class="line"><span class="string">ci:</span> <span class="string">type:</span> chan <span class="typename">int</span></span><br><span class="line"><span class="string">ci:</span> <span class="string">sizeof:</span> <span class="number">8</span></span><br><span class="line">---</span><br><span class="line"><span class="string">aci:</span>    <span class="string">type:</span> *chan <span class="typename">int</span></span><br><span class="line"><span class="string">aci:</span>    <span class="string">sizeof:</span> <span class="number">8</span></span><br><span class="line">---</span><br><span class="line"><span class="string">ci:</span> <span class="string">type:</span> chan <span class="typename">int</span></span><br><span class="line"><span class="string">ci:</span> <span class="string">sizeof:</span> <span class="number">8</span></span><br><span class="line">---</span><br><span class="line"><span class="string">abci:</span>   <span class="string">type:</span> *chan <span class="typename">int</span></span><br><span class="line"><span class="string">abci:</span>   <span class="string">sizeof:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><blockquote>
<p>[1], <a href="https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF7WWLux71CYD0eeD8" target="_blank" rel="external">Go 1.3+ Compiler Overhaul</a><br>[2], <a href="http://goog-perftools.sourceforge.net/doc/tcmalloc.html" target="_blank" rel="external">TCMalloc : Thread-Caching Malloc</a><br>[3], <a href="https://gist.github.com/Overvenus/f6cf225ec33cc98d6b8c" target="_blank" rel="external">slice, map and channel at runtime</a><br>[4], <a href="https://blog.golang.org/go-slices-usage-and-internals" target="_blank" rel="external">Go Slices: usage and internals</a></p>
</blockquote>
<p>End.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Where_is_the_make_implemention_3F"><a href="#Where_is_the_make_implemention_3F" class="headerlink" title="Where is the make implemention?"></a>Where is the make implemention?</h2><p>package <strong>runtime</strong><br>By the way, <em>new</em>, <em>map</em>, <em>slice</em>, <em>channel</em>, <em>goroutine</em> and <em>garbage collector</em>[<a href="https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF7WWLux71CYD0eeD8">1</a>] are also implemented in this package.</p>
<h2 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h2><p>Source file: go/src/runtime/slice.go</p>
<h3 id="Data_structure"><a href="#Data_structure" class="headerlink" title="Data structure"></a>Data structure</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">    array unsafe.Pointer</span><br><span class="line">    <span class="built_in">len</span>   <span class="typename">int</span></span><br><span class="line">    <span class="built_in">cap</span>   <span class="typename">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Underlying data structure of <strong>slice</strong> is trival. Go is statically typed, and why this litte struct can be the template of any type of slices? Well, look at the comments of <code>unsafe.Pointer</code></p>
<blockquote>
<p>// Pointer represents a pointer to an arbitrary type.  There are four special operations<br>// available for type Pointer that are not available for other types.<br>//  1) A pointer value of any type can be converted to a Pointer.<br>//  2) A Pointer can be converted to a pointer value of any type.  &lt;– here!<br>//  3) A uintptr can be converted to a Pointer.<br>//  4) A Pointer can be converted to a uintptr.<br>// Pointer therefore allows a program to defeat the type system and read and write<br>// arbitrary memory. It should be used with extreme care.</p>
</blockquote>
<p>In my opinion, <strong>Pointer</strong> in Go and <strong>*void</strong> in C are very like. <em>Pointer</em> anesthetizes the type system and read and write arbitrary memory in Go. <em>*void</em> can be converted to any type without warning in C.</p>]]>
    
    </summary>
    
      <category term="Go" scheme="http://neilsh.me/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Protocol and FSM]]></title>
    <link href="http://neilsh.me/2015/10/23/protocol_and_fsm/"/>
    <id>http://neilsh.me/2015/10/23/protocol_and_fsm/</id>
    <published>2015-10-23T13:17:00.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>本文中 Protocol 特指通讯协议。<br>首先简单的介绍一下什么是 Protocol，来看看 WIKI 上是怎么定义它的：</p>
<blockquote>
<p>Communications protocol, a defined set of rules and regulations that determine how data is transmitted in telecommunications and computer networking  –<a href="https://en.wikipedia.org/wiki/Protocol" target="_blank" rel="external">WIKI#Protocol</a></p>
</blockquote>
<p>简单的来说，协议是规范数据传输的一套规则。</p>
<h2 id="Finite_State_Machines__28FSM_29"><a href="#Finite_State_Machines__28FSM_29" class="headerlink" title="Finite State Machines (FSM)"></a>Finite State Machines (FSM)</h2><p>下面是摘自 WIKI 的对有限状态机的说明：</p>
<blockquote>
<p>It is conceived as an abstract machine that can be in one of a finite number of states. The machine is in only one state at a time; the state it is in at any given time is called the current state. It can change from one state to another when initiated by a triggering event or condition; this is called a transition. A particular FSM is defined by a list of its states, and the triggering condition for each transition.    –<a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="external">WIKI#FSM</a></p>
</blockquote>
<p>有限状态机是一种抽象的机器，拥有有限个状态。它在每个确定的时刻有且只有一个状态（当前状态），它的状态会由于输入条件而发生变化。一个状态转移表可以定义一个有限状态机。<br>有点绕，不过按我的理解，有限状态机有两个关键点，状态和输入条件。这两者之间有一套规则束缚着，规则就这个 FSM 的行为。<br><a id="more"></a></p>
<h2 id="Protocol_and_FSM"><a href="#Protocol_and_FSM" class="headerlink" title="Protocol and FSM"></a>Protocol and FSM</h2><p>把 Protocol 和 FSM 写在一起自然是因为它们有着紧密的联系。不准确的来说， Protocol 就是 FSM 的行为，遵循 Protocol 的实体（们）构成了这个 FSM 的抽象机器。</p>
<h2 id="Implement_a_Protocol"><a href="#Implement_a_Protocol" class="headerlink" title="Implement a Protocol"></a>Implement a Protocol</h2><p>实现协议不简单，特别是复杂的，持续状态的协议，TCP 算其中一个😂。<br>列一下实现协议的困难点：</p>
<ol>
<li>状态可能有多种。</li>
<li>条件可能有多种。</li>
<li>1, 2组合产生的情况更多！</li>
<li>因逻辑不清而产生的 BUG 难以排查。</li>
<li>复杂协议容易产生高耦合的代码。</li>
</ol>
<p>说了困难点，当然要题解决思路：</p>
<ol>
<li>编写代码前画出状态转移图，理清思路。</li>
<li>编写代码前定好各个函数的作用，及调用范围。</li>
<li>编写代码时避免过早的优化， premature optimization is the root of all evil， Knuth</li>
<li>有 Test case 那自然是极好的。</li>
</ol>
<p>这四点，箭箭射中我膝盖。唉，人啊，为什么痛过之后才知道悔改！（严肃脸）</p>
<h2 id="Viewservice"><a href="#Viewservice" class="headerlink" title="Viewservice"></a>Viewservice</h2><p>6.824 的 lab2 Part A 让我们实现一个具体的协议。计算机有随时宕机的可能，一旦发生它提供的服务就不可得了。该协议引入主机（Primary）和从机（Backup）机制并及时检查两者的存活状态，使系统服务具有高可用性，下面称这个协议为 <strong>Viewservice</strong>。<br>Viewservice 在某些条件下会产生一个 <strong>View</strong>。View 是一个数据结构，包含主机和从机的地址。<br>下面说一下这个协议要关键的几个点：</p>
<ol>
<li>持续状态协议，当前状态会影响到下一状态。</li>
<li>每次更新 View， Primary 不能为空。</li>
<li>下一个 View 中的 Primary 必须为当前 View 的 Primary 或 Backup。</li>
<li>每个活动的服务器都保存在 viewserver 中，状态是 Primary, Backup, Idle 其中的一种。</li>
<li>当前 View 中的 Primary 和 Backup 同时出错时，服务结束。</li>
</ol>
<p>上面几点并没有完整地描述 Viewservice，但已足够用来阐述 Protocol 和 FSM 之前的关系，想看完整的协议请访问<a href="http://nil.csail.mit.edu/6.824/2015/labs/lab-2.html" target="_blank" rel="external">lab2#Part A</a>.</p>
<h2 id="Viewservice_FSM"><a href="#Viewservice_FSM" class="headerlink" title="Viewservice FSM"></a>Viewservice FSM</h2><p>不难发现 View 就是状态，条件就是 Primary，Backup，Idle三者的存活状态。<br>注意，为了便于理解，这里的 FSM 只是完整的 Viewservice 中的<strong>关键部分（错误处理）</strong>，我去掉了一些无关痛痒的内容，并且我对 Idle 多了一个限制：每个时刻要没有 Idle，要么只有一个，不会有多个存在。但就算这个限制不存在也不会影响最后的正确性。这样做的好处是 Idle 只有两种状态，简化了条件的同时还便于表示（0 or 1） ;-)</p>
<p>由此设三位二进制数：XXX， 分别代表 Primary，Backup和Idle。1为存活，0为出错。</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">Primary</th>
<th style="text-align:center">Backup</th>
<th style="text-align:center">Idle</th>
<th style="text-align:right">XXX</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alive</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:right">111</td>
</tr>
<tr>
<td>Dead</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:right">000</td>
</tr>
</tbody>
</table>
<p>可能输出的状态有四种：</p>
<ol>
<li>100，只有 Primary 存活。</li>
<li>110，Primary 和 Backup 存活，没有 Idle。</li>
<li>111，Primary，Backup 和 Idle 都存活。</li>
<li>00X，Primary 和 Backup， 服务结束。</li>
</ol>
<p>注意： X 代表 0 和 1，00X 就是 000 和 001 的合集</p>
<p>所有可能的条件：</p>
<p> 1.100<br> 2.101<br> 3.110<br> 4.111<br> 5.010<br> 6.011<br> 7.00X</p>
<p>两者产生的状态转移表： 竖为当前状态，横为条件，<code>\</code> 为不会出现的情况</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">100</th>
<th style="text-align:center">101</th>
<th style="text-align:center">110</th>
<th style="text-align:center">111</th>
<th style="text-align:center">010</th>
<th style="text-align:center">011</th>
<th style="text-align:center">00X</th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td style="text-align:center">110</td>
<td style="text-align:center">\</td>
<td style="text-align:center">100</td>
<td style="text-align:center">\</td>
<td style="text-align:center">\</td>
<td style="text-align:center">\</td>
<td style="text-align:center">00X</td>
</tr>
<tr>
<td>110</td>
<td style="text-align:center">110</td>
<td style="text-align:center">110</td>
<td style="text-align:center">100</td>
<td style="text-align:center">111</td>
<td style="text-align:center">100</td>
<td style="text-align:center">110</td>
<td style="text-align:center">00X</td>
</tr>
<tr>
<td>111</td>
<td style="text-align:center">110</td>
<td style="text-align:center">110</td>
<td style="text-align:center">100</td>
<td style="text-align:center">111</td>
<td style="text-align:center">100</td>
<td style="text-align:center">110</td>
<td style="text-align:center">00X</td>
</tr>
<tr>
<td>00X</td>
<td style="text-align:center">00X</td>
<td style="text-align:center">00X</td>
<td style="text-align:center">00X</td>
<td style="text-align:center">00X</td>
<td style="text-align:center">00X</td>
<td style="text-align:center">00X</td>
<td style="text-align:center">00X</td>
</tr>
</tbody>
</table>
<p>根据上面的表可以画出状态转移图，更直观地说明这个 FSM</p>
<p><img src="http://ww1.sinaimg.cn/large/7f793092gw1exdcpwse63j21kw15madn.jpg" alt=""></p>
<p>清楚了这个 FSM，各种情况了然于心，设计数据结构，编写代码，实现协议 so easy。</p>
<h2 id="u540E_u8BDD"><a href="#u540E_u8BDD" class="headerlink" title="后话"></a>后话</h2><p>Part A部分我花了不少时间，主要还是当初没有理清协议，有多个 Test 通不过，代码结构推到了一遍又一遍。在机缘巧合下（debug下）发现协议和数电中的状态转移图有紧密的联系。然后尝试用状态转移图来表示协议，没想到还真可以。根据状态转移图改善了一下代码，通过各种 Test 快得飞起！这么好的方法不可能没有人比我先想到，查了 google 才知道有个概念叫<em>有限状态机</em>，有门课叫 <em>Protocol Engineering</em>，我的视野还太小。最后发一张 TCP 的状态转移图，感受下 TCP 的复杂性。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/f6/Tcp_state_diagram_fixed_new.svg" alt=""></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h2><blockquote>
<p><a href="http://nil.csail.mit.edu/6.824/2015/labs/lab-2.html" target="_blank" rel="external">lab2#Part A</a></p>
<p><a href="https://en.wikipedia.org/wiki/Protocol" target="_blank" rel="external">WIKI#Protocol</a></p>
<p><a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="external">WIKI#FSM</a></p>
<p><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank" rel="external">WIKI#TCP</a></p>
<p><a href="http://pet.ece.iisc.ernet.in/course/E2223/ch.pdf" target="_blank" rel="external">Specification of Protocol Using FSM</a></p>
<p><a href="http://cs.uccs.edu/~cs522/pe/pe.htm" target="_blank" rel="external">Protocol Specification using Sequence Chart or Message Flow DiagramApply Formal Method To Protocol Specification</a></p>
</blockquote>
<p>End.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>本文中 Protocol 特指通讯协议。<br>首先简单的介绍一下什么是 Protocol，来看看 WIKI 上是怎么定义它的：</p>
<blockquote>
<p>Communications protocol, a defined set of rules and regulations that determine how data is transmitted in telecommunications and computer networking  –<a href="https://en.wikipedia.org/wiki/Protocol">WIKI#Protocol</a></p>
</blockquote>
<p>简单的来说，协议是规范数据传输的一套规则。</p>
<h2 id="Finite_State_Machines__28FSM_29"><a href="#Finite_State_Machines__28FSM_29" class="headerlink" title="Finite State Machines (FSM)"></a>Finite State Machines (FSM)</h2><p>下面是摘自 WIKI 的对有限状态机的说明：</p>
<blockquote>
<p>It is conceived as an abstract machine that can be in one of a finite number of states. The machine is in only one state at a time; the state it is in at any given time is called the current state. It can change from one state to another when initiated by a triggering event or condition; this is called a transition. A particular FSM is defined by a list of its states, and the triggering condition for each transition.    –<a href="https://en.wikipedia.org/wiki/Finite-state_machine">WIKI#FSM</a></p>
</blockquote>
<p>有限状态机是一种抽象的机器，拥有有限个状态。它在每个确定的时刻有且只有一个状态（当前状态），它的状态会由于输入条件而发生变化。一个状态转移表可以定义一个有限状态机。<br>有点绕，不过按我的理解，有限状态机有两个关键点，状态和输入条件。这两者之间有一套规则束缚着，规则就这个 FSM 的行为。<br>]]>
    
    </summary>
    
      <category term="Algorithms" scheme="http://neilsh.me/tags/Algorithms/"/>
    
      <category term="C.S.笔记" scheme="http://neilsh.me/tags/C-S-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go Note]]></title>
    <link href="http://neilsh.me/2015/10/08/golang_note/"/>
    <id>http://neilsh.me/2015/10/08/golang_note/</id>
    <published>2015-10-08T14:03:00.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<!--
TODO:
   - ...
-->
<h2 id="new_2C_make_and_Local_variable"><a href="#new_2C_make_and_Local_variable" class="headerlink" title="new, make and Local variable"></a><code>new</code>, <code>make</code> and Local variable</h2><p>In short: new allocates memory; make initializes the slice, map, and channel types; local variable may be not <em>local</em> at all.</p>
<blockquote>
<p><code>new</code>: new(T) allocates zeroed storage for a new item of type T and returns its address, a value of type *T. In Go terminology, it returns a pointer to a newly allocated zero value of type T.</p>
<p><code>make</code>: creates slices, maps, and channels only, and it returns an <em>initialized (not zeroed)</em> value of type T (not *T).  </p>
<p>Local variable: unlike in C, it’s perfectly OK to return the address of a local variable; the storage associated with the variable survives after the function returns. In fact, taking the address of a composite literal allocates a fresh instance each time it is evaluated, so we can combine these last two lines. (e.g., <code>return &amp;File{fd: fd, name: name}</code>)<br> – <a href="https://golang.org/doc/effective_go.html#allocation_new" target="_blank" rel="external">Effective GO#allocation_new</a><br><a id="more"></a></p>
</blockquote>
<h2 id="Stack_or_Heap_3F"><a href="#Stack_or_Heap_3F" class="headerlink" title="Stack or Heap?"></a>Stack or Heap?</h2><p><a href="https://golang.org/doc/faq#stack_or_heap" target="_blank" rel="external">Golang FAQ#stackheap</a><br><strong>How do I know whether a variable is allocated on the heap or the stack?</strong></p>
<p>From a correctness standpoint, you don’t need to know. Each variable in Go exists as long as there are <em>references</em> to it. The storage location chosen by the implementation is irrelevant to the semantics of the language.</p>
<p>The storage location does have an effect on writing efficient programs. When possible, the Go compilers will allocate variables that are local to a function in that function’s stack frame. However, if the compiler cannot prove that the variable is not referenced after the function returns, then the compiler must allocate the variable on the garbage-collected heap to avoid dangling pointer errors. Also, if a local variable is very large, it might make more sense to store it on the heap rather than the stack.</p>
<p>In the current compilers, if a variable has its address taken, that variable is a candidate for allocation on the heap. However, a basic escape analysis recognizes some cases when such variables will not live past the return from the function and can reside on the stack.</p>
<p>An excellent talk about stack and heap of Go. <a href="http://dave.cheney.net/2014/06/07/five-things-that-make-go-fast" target="_blank" rel="external">Five things that make Go fast</a></p>
<h2 id="Happen_before_and_Channel"><a href="#Happen_before_and_Channel" class="headerlink" title="Happen before and Channel"></a>Happen before and Channel</h2><p><a href="https://golang.org/ref/mem#tmp_7" target="_blank" rel="external">Golang Memory Model#channel</a></p>
<blockquote>
<p>A send on a channel happens before the corresponding receive from that channel completes.</p>
</blockquote>
<p>An interesting case where <em>Happen Before</em> will take place.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</span><br><span class="line"><span class="keyword">var</span> a <span class="typename">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> f() &#123;</span><br><span class="line">    a = <span class="string">"hello, world"</span></span><br><span class="line">    &lt;-c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    <span class="keyword">go</span> f()</span><br><span class="line">    c &lt;- <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This snippet guarantes to print “hello, world”. The write to a happens before the receive on c, which happens before the corresponding send on c completes, which happens before the print.<br>If the channel were buffered (e.g., <code>c = make(chan int, 1)</code>) then the program would not be guaranteed to print “hello, world”. (It might print the empty string, crash, or do something else.)</p>
<h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><p><a href="https://talks.golang.org/2012/concurrency.slide" target="_blank" rel="external">Go Concurrency Patterns</a></p>
<h3 id="main_exits"><a href="#main_exits" class="headerlink" title="main exits"></a><code>main</code> exits</h3><p>What happens to goroutines that running background when main function returns?</p>
<blockquote>
<p>When the main returns, the programm goes away.<br>       – <a href="https://youtu.be/f6kdp27TYZs?t=7m46s" target="_blank" rel="external">Rob Pike#main_exit</a></p>
</blockquote>
<p>It confused me for a long time, now I get a concrete answer.</p>
<h3 id="Generator_in_Go"><a href="#Generator_in_Go" class="headerlink" title="Generator in Go"></a>Generator in Go</h3><blockquote>
<p>Generator: function that returns a channel.<br>Channels are first-class values, just like strings or integers.</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/rand"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    <span class="comment">// Python-like usage</span></span><br><span class="line">    <span class="keyword">for</span> s := <span class="keyword">range</span> boring(<span class="string">"generator"</span>) &#123;</span><br><span class="line">        fmt.Println(s)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"func main exits"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ### Generator ###</span></span><br><span class="line"><span class="keyword">func</span> boring(msg <span class="typename">string</span>) &lt;-<span class="keyword">chan</span> <span class="typename">string</span> &#123; <span class="comment">// Returns receive-only channel of strings.</span></span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() &#123; <span class="comment">// We launch the goroutine from inside the function.</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            c &lt;- fmt.Sprintf(<span class="string">"%s %d"</span>, msg, i)</span><br><span class="line">            time.Sleep(time.Duration(rand.Intn(<span class="number">1e3</span>)) * time.Millisecond)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(c) <span class="comment">// close channel c, otherwise for-range will be blocked.</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c <span class="comment">// Return the channel to the caller.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Unlike <strong>Generator</strong> in Python, the concept in Go is simple: <em>Generator: function that returns a channel</em>.</p>
<ul>
<li>Python Generator: generates data in time.</li>
<li>Go Generator: return a channel, reveives data in time.</li>
</ul>
<h3 id="Tricky_Keyword_2C_select"><a href="#Tricky_Keyword_2C_select" class="headerlink" title="Tricky Keyword, select"></a>Tricky Keyword, <code>select</code></h3><blockquote>
<p>Select<br>The select statement provides another way to handle multiple channels.<br>It’s like a switch, but each case is a communication: </p>
<ul>
<li>All channels are evaluated. </li>
<li>Selection blocks until one communication can proceed, which then does. </li>
<li>If multiple can proceed, select chooses pseudo-randomly. </li>
<li>A default clause, if present, executes immediately if no channel is ready.</li>
</ul>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> v1 := &lt;-c1:</span><br><span class="line">        fmt.Printf(<span class="string">"received %v from c1\n"</span>, v1)</span><br><span class="line">    <span class="keyword">case</span> v2 := &lt;-c2:</span><br><span class="line">        fmt.Printf(<span class="string">"received %v from c2\n"</span>, v1)</span><br><span class="line">    <span class="keyword">case</span> c3 &lt;- <span class="number">23</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"sent %v to c3\n"</span>, <span class="number">23</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"no one was ready to communicate\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Select with <strong>default</strong> is a non-blocking statement, even if no other case can be processed. Without <strong>default</strong>, select block forever if no other case can be processed.</p>
<p>END.</p>
]]></content>
    <summary type="html">
    <![CDATA[<!--
TODO:
   - ...
-->
<h2 id="new_2C_make_and_Local_variable"><a href="#new_2C_make_and_Local_variable" class="headerlink" title="new, make and Local variable"></a><code>new</code>, <code>make</code> and Local variable</h2><p>In short: new allocates memory; make initializes the slice, map, and channel types; local variable may be not <em>local</em> at all.</p>
<blockquote>
<p><code>new</code>: new(T) allocates zeroed storage for a new item of type T and returns its address, a value of type *T. In Go terminology, it returns a pointer to a newly allocated zero value of type T.</p>
<p><code>make</code>: creates slices, maps, and channels only, and it returns an <em>initialized (not zeroed)</em> value of type T (not *T).  </p>
<p>Local variable: unlike in C, it’s perfectly OK to return the address of a local variable; the storage associated with the variable survives after the function returns. In fact, taking the address of a composite literal allocates a fresh instance each time it is evaluated, so we can combine these last two lines. (e.g., <code>return &amp;File{fd: fd, name: name}</code>)<br> – <a href="https://golang.org/doc/effective_go.html#allocation_new">Effective GO#allocation_new</a><br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://neilsh.me/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ReadingFragment Structured Computer Organization]]></title>
    <link href="http://neilsh.me/2015/09/21/fragment_structured_Computer_Organization/"/>
    <id>http://neilsh.me/2015/09/21/fragment_structured_Computer_Organization/</id>
    <published>2015-09-21T11:44:00.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Parallelism_in_Computer_Organization"><a href="#Parallelism_in_Computer_Organization" class="headerlink" title="Parallelism in Computer Organization"></a>Parallelism in Computer Organization</h1><p>Why we need parallel computing? Because we are close to the limit of physics – the speed of light and memory becomes the bottleneck of computer.</p>
<h2 id="Parallelism_in_CPU"><a href="#Parallelism_in_CPU" class="headerlink" title="Parallelism in CPU"></a>Parallelism in CPU</h2><ul>
<li>Pipeline<ul>
<li>Sinlge pipeline</li>
<li>Mutli-pipeline</li>
<li>Superscalar pipeline</li>
</ul>
</li>
<li>Array Computers, single control unit and a array of processor.</li>
<li>Multiprocessors, multiple CPUs shared with one common  main memory, and communicate through BUS.</li>
</ul>
<h2 id="Parallelism_in_Memory"><a href="#Parallelism_in_Memory" class="headerlink" title="Parallelism in Memory"></a>Parallelism in Memory</h2><ul>
<li>Modern CPUs has it’s own private memory, cache.</li>
<li>Redundant Array of Inexpensive Disk(RAID), there are 5 level of RAID. I will be surprised if one system supports all 5 level RAID, especially level 2 and 3 ;-)<ul>
<li>Level 0, strips data(typically, a sector) over disks in round robin fashion. No backups.</li>
<li>Level 1, make an additional redundant backup of level 0.</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h1 id="IJVM"><a href="#IJVM" class="headerlink" title="IJVM"></a>IJVM</h1><p><strong>IJVM</strong> is short for <em>Integer instructions only Java Virtual Machine</em>.</p>
<h2 id="IJVM_Memory_Model"><a href="#IJVM_Memory_Model" class="headerlink" title="IJVM Memory Model"></a>IJVM Memory Model</h2><p>It looks like IJVM has a set of different stack operations compares with other machines. IJVM instructions can access memory only by indexing from some special registers. CPP, LV and SP point to word(4 bytes).</p>
<ul>
<li>The constant pool, addressing by CPP, it is loaded when the program is brought into memory and read-only afterward.</li>
<li>The Local variable frame, addressing by LV.</li>
<li>The operand stack, addressing by SP. Push and pop actions take place in this stack.</li>
<li>The method area, consider as the “TEXT” area in UNIX’s memory, addressing by PC. The first 2 byte indicating the number of parameters for the method, the second 2 bytes indicating the size of the local variables, opcode begins at the 5th byte.</li>
</ul>
<h2 id="IJVM_method_invocation"><a href="#IJVM_method_invocation" class="headerlink" title="IJVM method invocation"></a>IJVM method invocation</h2><p>Instead of using <code>CALL</code> instraction, JVM use <code>INVOKEVIRTUAL</code>. Below is a brief explanation of method invocation(highly recommad reading <a href="http://users.cis.fiu.edu/~prabakar/cda4101/Common/notes/lecture20.html" target="_blank" rel="external">CDA-4101 Lecture 20 Notes</a>)</p>
<ol>
<li>Push <code>PC</code>, <code>LV</code>, <code>OBJREF</code>(reference of the method’s object) and parameters into Local variable frame.</li>
<li>Build a new Local variable frame, the size of the new frame are determined by the second 2 bytes reading from The method area, and stores the caller’s PC ans LV in the top of the new frame. Replace <code>OBJREF</code> with <code>Link ptr</code> which points to the caller’s PC. Now <code>LV</code> points to <code>Link ptr</code> and <code>SP</code> points to caller’s LV.</li>
<li><code>PC</code> points to 5th byte in the method area.</li>
<li>Mark the new local variables frame as the current frame by seting <code>LV</code> with the address of <code>OBJREF</code>.</li>
</ol>
<p>After the method is done, the return value will be stored in <code>OBJREF</code> (<code>Link ptr</code>).</p>
<h2 id="Some_Qs_about_JVM"><a href="#Some_Qs_about_JVM" class="headerlink" title="Some Qs about JVM"></a>Some Qs about JVM</h2><ol>
<li>Give the Java statement that produced the following IJVM code:<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ILOAD <span class="literal">j</span></span><br><span class="line">ILOAD <span class="keyword">n</span></span><br><span class="line">ISUB</span><br><span class="line">BIPUSH 7</span><br><span class="line">ISUB</span><br><span class="line">DUP</span><br><span class="line">IADD</span><br><span class="line">ISTORE <span class="literal">i</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>A: <code>i = (j - n - 7) x 2;</code></p>
<ol>
<li>The JVM <code>INVOKEVIRTUAL</code> instruction needs to know how many parameters it has. Why?</li>
</ol>
<p>A: Old <code>PC</code> and <code>LV</code> will be stored on address of the top of local variables which will be computed by adding the size of local variables and <strong>parameters</strong>.</p>
<h1 id="Intel_Core_i7"><a href="#Intel_Core_i7" class="headerlink" title="Intel Core i7"></a>Intel Core i7</h1><p>Core i7 is a CPU with CISC outside and RISC inside. In side the chip, there is a decoder which build a bridge between CISC instructions and RISC data path.</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h1><blockquote>
<p>Structured Computer Organization(6th Edition) by Andrew S. Tanenbaum<br><a href="http://users.cis.fiu.edu/~prabakar/cda4101/Common/notes/lecture20.html" target="_blank" rel="external">CDA-4101 Lecture 20 Notes</a></p>
</blockquote>
<p>个人笔记，难免有误，如有发现，还望指出。<br>END.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Parallelism_in_Computer_Organization"><a href="#Parallelism_in_Computer_Organization" class="headerlink" title="Parallelism in Computer Organization"></a>Parallelism in Computer Organization</h1><p>Why we need parallel computing? Because we are close to the limit of physics – the speed of light and memory becomes the bottleneck of computer.</p>
<h2 id="Parallelism_in_CPU"><a href="#Parallelism_in_CPU" class="headerlink" title="Parallelism in CPU"></a>Parallelism in CPU</h2><ul>
<li>Pipeline<ul>
<li>Sinlge pipeline</li>
<li>Mutli-pipeline</li>
<li>Superscalar pipeline</li>
</ul>
</li>
<li>Array Computers, single control unit and a array of processor.</li>
<li>Multiprocessors, multiple CPUs shared with one common  main memory, and communicate through BUS.</li>
</ul>
<h2 id="Parallelism_in_Memory"><a href="#Parallelism_in_Memory" class="headerlink" title="Parallelism in Memory"></a>Parallelism in Memory</h2><ul>
<li>Modern CPUs has it’s own private memory, cache.</li>
<li>Redundant Array of Inexpensive Disk(RAID), there are 5 level of RAID. I will be surprised if one system supports all 5 level RAID, especially level 2 and 3 ;-)<ul>
<li>Level 0, strips data(typically, a sector) over disks in round robin fashion. No backups.</li>
<li>Level 1, make an additional redundant backup of level 0.</li>
</ul>
</li>
</ul>]]>
    
    </summary>
    
      <category term="Reading" scheme="http://neilsh.me/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jupyter-core 4.0.6 的发布]]></title>
    <link href="http://neilsh.me/2015/09/18/jupyter_core_406/"/>
    <id>http://neilsh.me/2015/09/18/jupyter_core_406/</id>
    <published>2015-09-18T12:39:00.000Z</published>
    <updated>2016-01-20T05:52:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Jupyter__u4E0E_IPython"><a href="#Jupyter__u4E0E_IPython" class="headerlink" title="Jupyter 与 IPython"></a>Jupyter 与 IPython</h1><p>Jupyter 是由 IPython 演化而来的，两者配合使用可提供交互式的编程体验，实现视觉化编程，写了什么，马上就能看见效果。Jupyter 类似于客户端，IPython 作为 Jupyter 的内核。之前 IPython 的杀手锏 notebook 现在转移到 Jupyter 中了。该神器不仅对 data science 有奇效，对于一般的 python 应用开发也有极大的帮助，它同样适合用于学习 python，其易用性直追 PyCharm。</p>
<h1 id="BUG_uFF1F"><a href="#BUG_uFF1F" class="headerlink" title="BUG？"></a>BUG？</h1><p>IPython 今年初的时候就有所接触，不过用了几天就卸载了，那时用的还是 IPython notebook。昨天由于课程需要，想在本地安装 IPython。习惯性地 GOOGLE， 打开 IPython 的官网，查看安装教程 <a href="https://jupyter.readthedocs.org/en/latest/install.html" target="_blank" rel="external">Installation</a> ，没想到居然跳转到了 Jupyter 的文档，当时就大吃一斤，再仔细一看，尼玛连 IPython 官网的名字都变了。</p>
<blockquote>
<p><a href="https://ipython.org/" target="_blank" rel="external">Jupyter and the future of IPython - IPython</a></p>
</blockquote>
<p>一直以来就知道 python 的世界变化快，可没想到居然这么快，没几个月，项目的名称都变了。 ∑(￣□￣;)<br><a id="more"></a><br>按照教程，<code>pip install jupyter</code>，一切都很顺利，顺利到让我不敢相信，安装 python 第三方模块在我印象中都是挺蛋疼的。<br>果不其然，安装完之后，一运行 <code>jupter notebook</code> 就报错了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter notebook</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/local/bin/jupyter-notebook"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sys.exit(main())</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/jupyter_core/application.py"</span>, line <span class="number">267</span>, <span class="keyword">in</span> launch_instance</span><br><span class="line">    <span class="keyword">return</span> super(JupyterApp, cls).launch_instance(argv=argv, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/traitlets/config/application.py"</span>, line <span class="number">591</span>, <span class="keyword">in</span> launch_instance</span><br><span class="line">    app.initialize(argv) File <span class="string">"&lt;string&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> initialize</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/traitlets/config/application.py"</span>, line <span class="number">75</span>, <span class="keyword">in</span> catch_config_error</span><br><span class="line">    <span class="keyword">return</span> method(app, *args, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/notebook/notebookapp.py"</span>, line <span class="number">1001</span>, <span class="keyword">in</span> initialize</span><br><span class="line">    super(NotebookApp, self).initialize(argv) File <span class="string">"&lt;string&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> initialize</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/traitlets/config/application.py"</span>, line <span class="number">75</span>, <span class="keyword">in</span> catch_config_error</span><br><span class="line">    <span class="keyword">return</span> method(app, *args, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/jupyter_core/application.py"</span>, line <span class="number">243</span>, <span class="keyword">in</span> initialize</span><br><span class="line">    self.migrate_config()</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/jupyter_core/application.py"</span>, line <span class="number">169</span>, <span class="keyword">in</span> migrate_config</span><br><span class="line">    migrate() </span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/jupyter_core/migrate.py"</span>, line <span class="number">232</span>, <span class="keyword">in</span> migrate</span><br><span class="line">    <span class="keyword">if</span> migrate_static_custom(custom_src, custom_dst): </span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/jupyter_core/migrate.py"</span>, line <span class="number">160</span>, <span class="keyword">in</span> migrate_static_custom</span><br><span class="line">    <span class="keyword">if</span> custom_css_empty:</span><br><span class="line">UnboundLocalError: local variable <span class="string">'custom_css_empty'</span> referenced before assignment</span><br></pre></td></tr></table></figure></p>
<p>一看有 css，直觉告诉我，可能是 Jinjia2 之类关于网页处理的模块出错了，于是卸载再重装，还是有此错误。pip 试了几遍不行，apt-get 试了几遍也不行。谷歌来谷歌去都找不到答案，项目的 issus 也翻了一遍，同样没结果，前前后后花了一个多小时，挺沮丧的。</p>
<h1 id="BUG_fix"><a href="#BUG_fix" class="headerlink" title="BUG fix"></a>BUG fix</h1><p>连重装大法都不行，这该不会是 BUG 吧？细细看了一边 traceback，再配合源码一看，立刻就知道哪里可能出错了。<br>原来 Jupyter 在第一次运行时会检测之前是否用过 IPython，如果用过，那就把旧的配置转换成新的。把旧版 IPython 配置文件夹删了之后，再运行<code>jupyter notebook</code>，一切正常。顺手修了这个 BUG。</p>
<h1 id="Create_a_Pull_Request"><a href="#Create_a_Pull_Request" class="headerlink" title="Create a Pull Request"></a>Create a Pull Request</h1><p>既然修了 BUG，那肯定要向项目开发者反馈啊，要为开源世界做贡献！ Github 主页也能好看点。 (΄◞ิ౪◟ิ‵)<br>过程也很简单：</p>
<ol>
<li>创建该 BUG 的 issus（可选，建议创建）</li>
<li>fork <a href="https://github.com/jupyter/jupyter_core" target="_blank" rel="external">jupyter-core</a></li>
<li>clone 自己的项目到本地</li>
<li>修补 BUG</li>
<li>git push origin</li>
<li>点击项目右侧的 pull request ，创建 pull request</li>
</ol>
<p>这成了我的第一个 Pull Request。现在 jupyter-core 最新的版本是 4.0.6， 感觉这就是为我发布的。我也成了 jupyter 核心模块的贡献者，呵呵。</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h1><blockquote>
<p><a href="https://ipython.org/" target="_blank" rel="external">https://ipython.org/</a><br><a href="https://jupyter.org/index.html" target="_blank" rel="external">https://jupyter.org/index.html</a><br><a href="https://jupyter.readthedocs.org/en/latest/install.html" target="_blank" rel="external">https://jupyter.readthedocs.org/en/latest/install.html</a><br><a href="https://yangsu.github.io/pull-request-tutorial/" target="_blank" rel="external">Pull Request Tutorial - A Visual Guide to Pull Requests</a></p>
</blockquote>
<p>个人笔记，难免有误，如有发现，还望指出。<br>END.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Jupyter__u4E0E_IPython"><a href="#Jupyter__u4E0E_IPython" class="headerlink" title="Jupyter 与 IPython"></a>Jupyter 与 IPython</h1><p>Jupyter 是由 IPython 演化而来的，两者配合使用可提供交互式的编程体验，实现视觉化编程，写了什么，马上就能看见效果。Jupyter 类似于客户端，IPython 作为 Jupyter 的内核。之前 IPython 的杀手锏 notebook 现在转移到 Jupyter 中了。该神器不仅对 data science 有奇效，对于一般的 python 应用开发也有极大的帮助，它同样适合用于学习 python，其易用性直追 PyCharm。</p>
<h1 id="BUG_uFF1F"><a href="#BUG_uFF1F" class="headerlink" title="BUG？"></a>BUG？</h1><p>IPython 今年初的时候就有所接触，不过用了几天就卸载了，那时用的还是 IPython notebook。昨天由于课程需要，想在本地安装 IPython。习惯性地 GOOGLE， 打开 IPython 的官网，查看安装教程 <a href="https://jupyter.readthedocs.org/en/latest/install.html">Installation</a> ，没想到居然跳转到了 Jupyter 的文档，当时就大吃一斤，再仔细一看，尼玛连 IPython 官网的名字都变了。</p>
<blockquote>
<p><a href="https://ipython.org/">Jupyter and the future of IPython - IPython</a></p>
</blockquote>
<p>一直以来就知道 python 的世界变化快，可没想到居然这么快，没几个月，项目的名称都变了。 ∑(￣□￣;)<br>]]>
    
    </summary>
    
      <category term="Git" scheme="http://neilsh.me/tags/Git/"/>
    
      <category term="Python" scheme="http://neilsh.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Few words about 6.828]]></title>
    <link href="http://neilsh.me/2015/08/30/few_words_about_6_828/"/>
    <id>http://neilsh.me/2015/08/30/few_words_about_6_828/</id>
    <published>2015-08-30T14:14:00.000Z</published>
    <updated>2016-01-20T04:08:49.000Z</updated>
    <content type="html"><![CDATA[<p>Recently I’ve been working on JOS, which is part of <a href="http://pdos.csail.mit.edu/6.828/2014/index.html" target="_blank" rel="external">6.828: Operating System Engineering</a>. 6.828 is a great course about OS, it brings principle to practice, you will implement a simple OS in this course. It also talks about the most fancy research of OS. I recommend every CS sutdent to take this course.</p>
<a id="more"></a>
<h2 id="6-828_u7B80_u4ECB"><a href="#6-828_u7B80_u4ECB" class="headerlink" title="6.828简介"></a>6.828简介</h2><p>好了，装逼完毕。我认真说说最近上的这门课，6.828是 MIT 开放课程中的一部分，它开放了所有关于该课程的资料，包括上课视频。我个人认为这是一门极好的关于操作系统课程，经典书籍上的知识在这将不再枯燥，它是一门操作系统课程，同时也广泛地涉及了CS中的其他内容，包括但不限于网络，安全，分布式计算等等。</p>
<h2 id="u77E5_u65B0"><a href="#u77E5_u65B0" class="headerlink" title="知新"></a>知新</h2><h3 id="u5BFB_u627E_u8D44_u6599_u7684_u6B63_u786E_u59FF_u52BF"><a href="#u5BFB_u627E_u8D44_u6599_u7684_u6B63_u786E_u59FF_u52BF" class="headerlink" title="寻找资料的正确姿势"></a>寻找资料的正确姿势</h3><p>课程实验中有许多地方并没有说得很仔细，只有大概的意图，实现的细节需要你自己去查阅资料。比如说汇编里面的 <code>call</code> <code>ret</code> 对 <code>ESP``EBP``EIP</code>三个寄存器的影响，它指出了这两个指令于函数调用上、传递参数有关，然后它让你写一个栈回溯函数。<br>Google <code>ret call</code> 的第一个结果：<a href="http://www.c-jump.com/CIS77/ASM/Procedures/P77_0010_call_ret.htm" target="_blank" rel="external">CALL and RET Instructions</a></p>
<blockquote>
<p>CALL pushes the return address onto the stack and transfers control to a procedure.<br>RET pops the return address off the stack and returns control to that location.</p>
</blockquote>
<p>嗯，很好，把 <code>call</code> 和 <code>ret</code> 所干的事说了一下，但是太模糊了，比如说 return address 指向哪里，怎样来 transfers control ， pops the return address 到哪里？这些都没有说清楚。对于初学者来说，这个结果只能做参考，并不能直接拿来用。<br>后来经过一番查找后找到了图文并茂的资料。<a href="http://unixwiz.net/techtips/win32-callconv-asm.html" target="_blank" rel="external">Intel x86 Function-call Conventions - Assembly View</a> 其中 Calling a __cdecl function 那一节讲得很清楚:<br><img src="http://ww1.sinaimg.cn/large/7f793092gw1evo1wpue9bg20770cm3yd.gif" alt=""></p>
<blockquote>
<p>16(%ebp)    - third function parameter<br>12(%ebp)    - second function parameter<br>8(%ebp)    - first function parameter</p>
</blockquote>
<p>一图胜千言，函数调用，参数传递，<code>ESP``EBP``EIP</code>都给说明白了。对比一下前面引用的资料，完全符合。现在我们可以理解，为什么栈要从高向低生长，C 语言中参数为什么从右向左压入栈，函数内的本地变量占用的内存为什么不需要手动管理，这一切都是紧密相关的。</p>
<h3 id="C__u7684_u9ED1_u9B54_u6CD5"><a href="#C__u7684_u9ED1_u9B54_u6CD5" class="headerlink" title="C 的黑魔法"></a>C 的黑魔法</h3><p>C 语言作为入门课在大一上学期时就学了，教材是谭浩强的，他的书在网上被喷的狗血淋头，我也觉得这不是本好教材，借了本 B&amp;D 的 《The C Programming Language》，囫囵吞枣地看了一遍，指针、结构体、联合体、枚举等概念倒背如流，期末的时候拿了高分，自以为 C 学得还不错。现在想来，那时还是太年轻，操作系统里漫天的指针，结构体、联合体互相的嵌套更是少不了，各种神奇的写法见都没见过。下面来几个简单的例子：</p>
<h4 id="u7ED9_u7ED3_u6784_u4F53_u521D_u59CB_u5316_u65F6_u7ED9_u6307_u5B9A_u6210_u5458_u8D4B_u503C_uFF1A"><a href="#u7ED9_u7ED3_u6784_u4F53_u521D_u59CB_u5316_u65F6_u7ED9_u6307_u5B9A_u6210_u5458_u8D4B_u503C_uFF1A" class="headerlink" title="给结构体初始化时给指定成员赋值："></a>给结构体初始化时给指定成员赋值：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> foo &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> u;</span><br><span class="line">    <span class="keyword">char</span> *str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s = <span class="string">"Hello!"</span>;</span><br><span class="line">    <span class="keyword">struct</span> foo f = &#123;</span><br><span class="line">        .str = s;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u8DE8_u6E90_u6587_u4EF6_u8C03_u7528_u533F_u540D_u7ED3_u6784_u4F53_u53D8_u91CF_uFF1A"><a href="#u8DE8_u6E90_u6587_u4EF6_u8C03_u7528_u533F_u540D_u7ED3_u6784_u4F53_u53D8_u91CF_uFF1A" class="headerlink" title="跨源文件调用匿名结构体变量："></a>跨源文件调用匿名结构体变量：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义在 a.c 中</span></span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> us[<span class="number">99</span>];</span><br><span class="line">&#125; foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 b.c 中</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> us[<span class="number">99</span>];</span><br><span class="line">&#125; foo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, foo.i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5173_u952E_u5B57_volatile"><a href="#u5173_u952E_u5B57_volatile" class="headerlink" title="关键字 volatile"></a>关键字 volatile</h4><blockquote>
<p>the volatile keyword indicates that a value may change between different accesses, even if it does not appear to be modified. This keyword prevents an optimizing compiler from optimizing away subsequent reads or writes and thus incorrectly reusing a stale value or omitting writes.    – <a href="https://en.wikipedia.org/wiki/Volatile_(computer_programming" target="_blank" rel="external">Wikipedia</a>)</p>
</blockquote>
<p>引用指出 volatile 是为了防止编译“优化”对该变量的一系列读写操作。上面抛出一大段结论，还是挺令人疑惑的。什么叫 may change between different accesses， 什么叫 optimizing away subsequent reads or writes？这一切用“底层“的汇编来解释反而容易。<br><a href="/asset/code/v_int.c">带有 volatile</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// volatile_int.c</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总计4次对 foo 的操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    foo = <span class="number">0xff</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, foo);</span><br><span class="line">    foo = <span class="number">0xff</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ gcc -O1 volatile_int.c -o volatile_int</span><br><span class="line"><span class="comment"># 查看汇编</span></span><br><span class="line">$ objdump -S volatile_int &gt; v.asm</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000000000040055d &#60;main&#62;:&#10;  40055d:&#9;48 83 ec 08          &#9;sub    $0x8,%rsp&#10;  400561:&#9;c7 05 d9 0a 20 00 ff &#9;movl   $0xff,0x200ad9(%rip)        # 601044 &#60;foo&#62;&#10;  400568:&#9;00 00 00 &#10;  40056b:&#9;8b 15 d3 0a 20 00    &#9;mov    0x200ad3(%rip),%edx        # 601044 &#60;foo&#62;&#10;  400571:&#9;be 34 06 40 00       &#9;mov    $0x400634,%esi&#10;  400576:&#9;bf 01 00 00 00       &#9;mov    $0x1,%edi&#10;  40057b:&#9;b8 00 00 00 00       &#9;mov    $0x0,%eax&#10;  400580:&#9;e8 db fe ff ff       &#9;callq  400460 &#60;__printf_chk@plt&#62;&#10;  400585:&#9;c7 05 b5 0a 20 00 ff &#9;movl   $0xff,0x200ab5(%rip)        # 601044 &#60;foo&#62;&#10;  40058c:&#9;00 00 00 &#10;  40058f:&#9;8b 15 af 0a 20 00    &#9;mov    0x200aaf(%rip),%edx        # 601044 &#60;foo&#62;&#10;  400595:&#9;be 34 06 40 00       &#9;mov    $0x400634,%esi&#10;  40059a:&#9;bf 01 00 00 00       &#9;mov    $0x1,%edi&#10;  40059f:&#9;b8 00 00 00 00       &#9;mov    $0x0,%eax&#10;  4005a4:&#9;e8 b7 fe ff ff       &#9;callq  400460 &#60;__printf_chk@plt&#62;&#10;  4005a9:&#9;48 83 c4 08          &#9;add    $0x8,%rsp&#10;  4005ad:&#9;c3                   &#9;retq   &#10;  4005ae:&#9;66 90                &#9;xchg   %ax,%ax</span><br></pre></td></tr></table></figure>
<p><a href="/asset/code/nv_int.c">不带 volatile</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000000000040055d &#60;main&#62;:&#10;  40055d:&#9;48 83 ec 08          &#9;sub    $0x8,%rsp&#10;  400561:&#9;c7 05 d9 0a 20 00 ff &#9;movl   $0xff,0x200ad9(%rip)        # 601044 &#60;foo&#62;&#10;  400568:&#9;00 00 00 &#10;  40056b:&#9;ba ff 00 00 00       &#9;mov    $0xff,%edx&#10;  400570:&#9;be 34 06 40 00       &#9;mov    $0x400634,%esi&#10;  400575:&#9;bf 01 00 00 00       &#9;mov    $0x1,%edi&#10;  40057a:&#9;b8 00 00 00 00       &#9;mov    $0x0,%eax&#10;  40057f:&#9;e8 dc fe ff ff       &#9;callq  400460 &#60;__printf_chk@plt&#62;&#10;  400584:&#9;c7 05 b6 0a 20 00 ff &#9;movl   $0xff,0x200ab6(%rip)        # 601044 &#60;foo&#62;&#10;  40058b:&#9;00 00 00 &#10;  40058e:&#9;ba ff 00 00 00       &#9;mov    $0xff,%edx&#10;  400593:&#9;be 34 06 40 00       &#9;mov    $0x400634,%esi&#10;  400598:&#9;bf 01 00 00 00       &#9;mov    $0x1,%edi&#10;  40059d:&#9;b8 00 00 00 00       &#9;mov    $0x0,%eax&#10;  4005a2:&#9;e8 b9 fe ff ff       &#9;callq  400460 &#60;__printf_chk@plt&#62;&#10;  4005a7:&#9;48 83 c4 08          &#9;add    $0x8,%rsp&#10;  4005ab:&#9;c3                   &#9;retq   &#10;  4005ac:&#9;0f 1f 40 00          &#9;nopl   0x0(%rax)</span><br></pre></td></tr></table></figure></p>
<p>对比可见，带有 volatile 的对 foo 有四次操作，而不带的只有 2 次，从这个例子可以看出一些端倪， volatile 确保了 C 源码中每次对 foo 的操作都是直接对 foo 内存地址的操作。</p>
<h4 id="u6307_u9488_u4E0E_u6570_u7EC4"><a href="#u6307_u9488_u4E0E_u6570_u7EC4" class="headerlink" title="指针与数组"></a>指针与数组</h4><p>用伪码来简述一下两者的关系。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">char *pc = <span class="number">0</span>；</span><br><span class="line">int *<span class="constant">pi</span> = <span class="number">0</span>;</span><br><span class="line">int ai[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">(pc += <span class="number">1</span>) == <span class="number">1</span> <span class="keyword">is</span> <span class="constant">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sizeof(int) == <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">then</span> <span class="constant">pi</span> + <span class="number">1</span> == <span class="number">4</span> <span class="keyword">is</span> <span class="constant">true</span>; ((int *)pc) + <span class="number">1</span> == <span class="number">5</span> <span class="keyword">is</span> <span class="constant">true</span>;</span><br><span class="line"></span><br><span class="line">*ai == <span class="number">0</span> <span class="keyword">is</span> <span class="constant">true</span></span><br><span class="line"></span><br><span class="line"><span class="constant">pi</span> = ai</span><br><span class="line">    <span class="keyword">then</span> *<span class="constant">pi</span> == <span class="number">0</span>, <span class="constant">pi</span>[<span class="number">1</span>] == <span class="number">1</span>, <span class="constant">pi</span>[<span class="number">4</span>] == <span class="number">4</span> are <span class="constant">true</span>;</span><br></pre></td></tr></table></figure>
<p>自从学了6.828后，指针再也不是洪水猛兽，自以为余已达收发自如的境界。</p>
<h3 id="u6742_u9879"><a href="#u6742_u9879" class="headerlink" title="杂项"></a>杂项</h3><p>对各种计算机术语有了新的认识：process、thread、stub、trap、caller、callee、coroutine等等。<br>各种命令：man、git、make、gcc、objdump等等。特别是man，我还是第一次知道，man还能当编程手册，查看函数的用法。<br>理论与实践之间的差异，工程上的权衡于妥协。</p>
<h2 id="u4E00_u4E9B_u8D44_u6E90"><a href="#u4E00_u4E9B_u8D44_u6E90" class="headerlink" title="一些资源"></a>一些资源</h2><p><a href="http://pdos.csail.mit.edu/6.828/2014/index.html" target="_blank" rel="external">官方网站</a><br><a href="https://www.youtube.com/playlist?list=PLfciLKR3SgqNJKKIKUliWoNBBH1VHL3AP" target="_blank" rel="external">课程视频</a><br><a href="https://bitbucket.org/overvenus/jos/" target="_blank" rel="external">我的 JOS (已完成lab1～6)</a></p>
<p>最后，再次感谢 MIT 的教师职员们，并以一张 JOS 靓照结尾。</p>
<p><img src="http://ww1.sinaimg.cn/large/7f793092gw1evohw0nih7j20k00bw75r.jpg" alt=""></p>
<p>个人笔记，难免有误，如有发现，还望指出。<br>END.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently I’ve been working on JOS, which is part of <a href="http://pdos.csail.mit.edu/6.828/2014/index.html">6.828: Operating System Engineering</a>. 6.828 is a great course about OS, it brings principle to practice, you will implement a simple OS in this course. It also talks about the most fancy research of OS. I recommend every CS sutdent to take this course.</p>]]>
    
    </summary>
    
      <category term="C.S.笔记" scheme="http://neilsh.me/tags/C-S-%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MIT" scheme="http://neilsh.me/tags/MIT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一份实习]]></title>
    <link href="http://neilsh.me/2015/08/29/my_frist_internship/"/>
    <id>http://neilsh.me/2015/08/29/my_frist_internship/</id>
    <published>2015-08-29T06:33:00.000Z</published>
    <updated>2015-11-07T04:04:21.000Z</updated>
    <content type="html"><![CDATA[<p>两个月一晃而过，暑假结束了，第一份实习也结束了。</p>
<p>这段时间，我在 EasyLinking 实习，得到了 FULL TIME 的安卓开发工作经历，真真切切地认识到<strong>文档和注释</strong>重要性，同时还结识了一帮前辈：重视人才的纪总，平和的游总，自学成才的 iOS 大牛老王，后台开发大牛老邹和小胡，开发资历第一丁老师，全栈的北大高材生超哥，等等。</p>
<p>实习中给我印象最深的还是团队协作。不得不说，这个技术团队成员之间协助效率非常高，一个问题发现之后，马上就能得到反馈，我想这应该得利于扁平化的管理模式。</p>
<p>既然我实习的是安卓开发，那就说一下关于安卓的事吧。广播是一个安卓应用的重要组成部分，之前没有开发过业务逻辑复杂的应用，对本地广播的理解也就停留在 <a href="https://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html" target="_blank" rel="external">文档</a> 上面，经过这次实习，我已经 understand from practice ，它很强大，也很危险，不愧被称为安卓中的 <code>goto</code>(泪目，掉过坑)。对安卓的触屏事件也有了<a href="/2015/08/13/dispatch_and_handle_motionevent_in_android/">进一步的认识</a>。我还成功地劝服了安卓开发组，把 IDE 从 Eclipse 迁移到 AndroidStudio。:-)</p>
<p>在工作之余，我实现了一个小型的操作系统 <a href="https://bitbucket.org/overvenus/jos/" target="_blank" rel="external">JOS</a>。由于白天没有空，JOS 的代码大部分是在晚上写的，每天都写到凌晨，导致 Work-life balance 很糟糕，脸上冒出了一些痘痘。</p>
<p>总的来说，这是一个有意义的暑假。</p>
<p>END.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>两个月一晃而过，暑假结束了，第一份实习也结束了。</p>
<p>这段时间，我在 EasyLinking 实习，得到了 FULL TIME 的安卓开发工作经历，真真切切地认识到<strong>文档和注释</strong>重要性，同时还结识了一帮前辈：重视人才的纪总，平和的游总]]>
    </summary>
    
      <category term="Career" scheme="http://neilsh.me/tags/Career/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android触屏事件处理分发--以SwipeRefreshLayout为例]]></title>
    <link href="http://neilsh.me/2015/08/13/dispatch_and_handle_motionevent_in_android/"/>
    <id>http://neilsh.me/2015/08/13/dispatch_and_handle_motionevent_in_android/</id>
    <published>2015-08-13T06:33:00.000Z</published>
    <updated>2015-11-07T04:04:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="PullToRefresh__u4E0E_SwipeRefreshLayout"><a href="#PullToRefresh__u4E0E_SwipeRefreshLayout" class="headerlink" title="PullToRefresh 与 SwipeRefreshLayout"></a>PullToRefresh 与 SwipeRefreshLayout</h2><p>这段时间我在 Easyinking 公司实习， 做安卓开发。之前的 App 中大量使用 <a href="https://github.com/chrisbanes/Android-PullToRefreshhttps://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">Android-PullToRefresh</a>。这个轮子很经典，在较久版本的安卓上面也很好使，不过作者已经放弃维护了，在我们的 App 上也发现了一个诡异的BUG：与WebView配合使用时，在网络环境差的情况下会出现一次下拉多次刷新的情况，症状就是整个网页在那上下抽搐。在官方支持库 support-v4:22 中自带了一个类似的 SwipeRefreshLayout，效果也是一级棒。由于两者的 API 设计差不多，使用的情景也几乎一样，所以可以无痛地从 <a href="https://github.com/chrisbanes/Android-PullToRefreshhttps://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">PullToRefresh</a> 转移过来。</p>
<h2 id="u654F_u611F_u7684_SwipeRefreshLayout"><a href="#u654F_u611F_u7684_SwipeRefreshLayout" class="headerlink" title="敏感的 SwipeRefreshLayout"></a>敏感的 SwipeRefreshLayout</h2><p>从 PullToRefresh 转移到 SwipeRefreshLayout 大概花了十来分钟，初步测试出来的效果也令人满意。但是，实际使用中总会有意想不到的问题。我们把一个WebView放在了 SwipeRefreshLayout 中， 该 WebView 呈现的网页中有一个图片轮播，可左右滑动，下面的问题是 SwipeRefreshLayout 过于敏感，它把稍有下拉倾向的左右滑动全部拦截掉，并把他们当作下拉的手势，典型的 False Positive ， 处理的思路也很简单，既然是误报，过滤之即可。</p>
<h3 id="u8BEF_u62A5_u7684_u624B_u52BF"><a href="#u8BEF_u62A5_u7684_u624B_u52BF" class="headerlink" title="误报的手势"></a><strong>误报的手势</strong></h3><p><img src="http://ww1.sinaimg.cn/bmiddle/7f793092gw1ev1xydoiwoj20u01hcwoe.jpg" alt=""><img src="http://ww3.sinaimg.cn/bmiddle/7f793092gw1ev1ys28bm4j20u01hc12q.jpg" alt=""></p>
<h3 id="u7406_u60F3_u4E2D_u7684_u624B_u52BF"><a href="#u7406_u60F3_u4E2D_u7684_u624B_u52BF" class="headerlink" title="理想中的手势"></a><strong>理想中的手势</strong></h3><p><img src="http://ww1.sinaimg.cn/bmiddle/7f793092gw1ev1ytgovwpj20u01hcgve.jpg" alt=""></p>
<a id="more"></a>
<h2 id="SwipeRefreshLayout__u5237_u65B0_u7684_u7EC6_u8282"><a href="#SwipeRefreshLayout__u5237_u65B0_u7684_u7EC6_u8282" class="headerlink" title="SwipeRefreshLayout 刷新的细节"></a>SwipeRefreshLayout 刷新的细节</h2><p>SwipeRefreshLayout 有个自定义接口 SwipeRefreshLayout.OnRefreshListener，里面的函数<code>onRefresh()</code>会在下拉刷新时执行。SwipeRefreshLayout 把 OnRefreshListener 包装进了<code>AnimationListener mRefreshListener</code>，并且<code>onRefresh()</code>方法只会在<code>onAnimationEnd()</code>中执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Animation.AnimationListener mRefreshListener = <span class="keyword">new</span> Animation.AnimationListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRefreshing) &#123;</span><br><span class="line">            <span class="comment">// Make sure the progress view is fully visible</span></span><br><span class="line">            mProgress.setAlpha(MAX_ALPHA);</span><br><span class="line">            mProgress.start();</span><br><span class="line">            <span class="keyword">if</span> (mNotify) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mListener.onRefresh();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mProgress.stop();</span><br><span class="line">            mCircleView.setVisibility(View.GONE);</span><br><span class="line">            setColorViewAlpha(MAX_ALPHA);</span><br><span class="line">            <span class="comment">// Return the circle to its start position</span></span><br><span class="line">            <span class="keyword">if</span> (mScale) &#123;</span><br><span class="line">                setAnimationProgress(<span class="number">0</span> <span class="comment">/* animation complete and view is hidden */</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setTargetOffsetTopAndBottom(mOriginalOffsetTop - mCurrentTargetOffsetTop,</span><br><span class="line">                        <span class="keyword">true</span> <span class="comment">/* requires update */</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mCurrentTargetOffsetTop = mCircleView.getTop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建刷新指示图标    </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createProgressView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mCircleView = <span class="keyword">new</span> CircleImageView(getContext(), CIRCLE_BG_LIGHT, CIRCLE_DIAMETER/<span class="number">2</span>);</span><br><span class="line">    mProgress = <span class="keyword">new</span> MaterialProgressDrawable(getContext(), <span class="keyword">this</span>);</span><br><span class="line">    mProgress.setBackgroundColor(CIRCLE_BG_LIGHT);</span><br><span class="line">    mCircleView.setImageDrawable(mProgress);</span><br><span class="line">    mCircleView.setVisibility(View.GONE);</span><br><span class="line">    addView(mCircleView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 listener 注册在<code>mCircleView</code>，负责了<strong>两个动画</strong>，一个是下拉回弹的动画，另一个是刷新转圈的动画。下拉回弹动画的完成，代表触发了刷新，接下来就执行<code>onRefresh()</code>。刷新转圈的动画完成时，代表了<code>onRefresh()</code>的完成，之后就让刷新图标消失。</p>
<p>下拉回弹的动画是由<code>animateOffsetToCorrectPosition()</code>开始的，也就是说刷新也是由这个方法触发的。经过简单分析后不难发现触发刷新的是<code>onTouchEvent()</code>方法。</p>
<h2 id="onInterceptTouchEvent_28_29_V-S-_onTouchEvent_28_29"><a href="#onInterceptTouchEvent_28_29_V-S-_onTouchEvent_28_29" class="headerlink" title="onInterceptTouchEvent() V.S. onTouchEvent()"></a>onInterceptTouchEvent() V.S. onTouchEvent()</h2><p>在安卓触屏事件分发处理过程中这两个是关键方法。在覆写这两个方法时需要遵守一定的规则，否则会有奇怪的事情发生，具体如下：</p>
<h3 id="ViewGroup-onInterceptTouchEvent_28_29"><a href="#ViewGroup-onInterceptTouchEvent_28_29" class="headerlink" title="ViewGroup.onInterceptTouchEvent()"></a>ViewGroup.onInterceptTouchEvent()</h3><blockquote>
<p>Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point.</p>
<p>Using this function takes some care, as it has a fairly complicated interaction with View.onTouchEvent(MotionEvent), and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:</p>
<ul>
<li>You will receive the down event here.</li>
<li>The down event will be handled either by a child of this view group, or given to your own onTouchEvent() method to handle; this means you should implement onTouchEvent() to return true, so you will continue to see the rest of the gesture (instead of looking for a parent view to handle it). Also, by returning true from onTouchEvent(), you will not receive any following events in onInterceptTouchEvent() and all touch processing must happen in onTouchEvent() like normal.</li>
<li>For as long as you return false from this function, each following event (up to and including the final up) will be delivered first here and then to the target’s onTouchEvent().</li>
<li>If you return true from here, you will not receive any following events: the target view will receive the same event but with the action ACTION_CANCEL, and all further events will be delivered to your onTouchEvent() method and no longer appear here.</li>
</ul>
</blockquote>
<h3 id="View-onTouchEvent_28_29"><a href="#View-onTouchEvent_28_29" class="headerlink" title="View.onTouchEvent()"></a>View.onTouchEvent()</h3><blockquote>
<p>Implement this method to handle touch screen motion events.</p>
<p>If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling performClick(). This will ensure consistent system behavior, including:</p>
<ul>
<li>obeying click sound preferences</li>
<li>dispatching OnClickListener calls</li>
<li>handling ACTION_CLICK when accessibility features are enabled</li>
</ul>
</blockquote>
<p>从文档上来看，当一个触屏事件发生时，安卓框架会先把事件发送到<code>ViewGroup.onInterceptTouchEvent()</code>，再根据其返回的结果来决定该事件该份配给自己的<code>ViewGroup.onTouchEvent()</code>，还是 target view 的<code>View.onTouchEvent()</code>。（注意 target view 指的是 layout.xml 中嵌套在SwipeRefreshLayout里的View，或是处于SwipeRefreshLayout之下的View。）那么SwipeRefreshLayout在处理触屏事件的流程也应如此。</p>
<h2 id="SwipeRefreshLayout__u5BF9_u89E6_u5C4F_u4E8B_u4EF6_u7684_u53CD_u5E94"><a href="#SwipeRefreshLayout__u5BF9_u89E6_u5C4F_u4E8B_u4EF6_u7684_u53CD_u5E94" class="headerlink" title="SwipeRefreshLayout 对触屏事件的反应"></a>SwipeRefreshLayout 对触屏事件的反应</h2><p>在修改SwipeRefreshLayout前，就算不清楚它的代码，那至少也要了解它对触屏事件的反馈。最直观的方法是创建一个子类，覆写那两个方法，算是曲线救国吧。具体的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSwipeRefreshLayout</span> <span class="keyword">extends</span> <span class="title">SwipeRefreshLayout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SSwipe"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SSwipeRefreshLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SSwipeRefreshLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">        Log.d(TAG + <span class="string">"BT"</span>, String.valueOf(b));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">        Log.d(TAG + <span class="string">"BI"</span>, String.valueOf(b));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u89E6_u53D1_u5237_u65B0"><a href="#u89E6_u53D1_u5237_u65B0" class="headerlink" title="触发刷新"></a>触发刷新</h3><h4 id="u5411_u5DE6_u4E0B_u6ED1"><a href="#u5411_u5DE6_u4E0B_u6ED1" class="headerlink" title="向左下滑"></a><strong>向左下滑</strong></h4><p><img src="http://ww2.sinaimg.cn/bmiddle/7f793092gw1ev34kpb2ldj20u01hc7an.jpg" alt=""></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">52.650</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">52.679</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">06.657</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">06.790</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ true</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">06.808</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true  &lt;--- onTouchEvent</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">06.811</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">06.831</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="u5411_u53F3_u4E0B_u6ED1"><a href="#u5411_u53F3_u4E0B_u6ED1" class="headerlink" title="向右下滑"></a><strong>向右下滑</strong></h4><p><img src="http://ww4.sinaimg.cn/bmiddle/7f793092gw1ev34lnjl05j20u01hcn3v.jpg" alt=""></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.546</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.700</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.717</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.726</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.743</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.760</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.777</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.794</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.812</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ true</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.829</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true  &lt;--- onTouchEvent</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">27.845</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">06.868</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">06.893</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="u7B14_u76F4_u5411_u4E0B_u6ED1"><a href="#u7B14_u76F4_u5411_u4E0B_u6ED1" class="headerlink" title="笔直向下滑"></a><strong>笔直向下滑</strong></h4><p><img src="http://ww3.sinaimg.cn/bmiddle/7f793092gw1ev34m7lgjxj20u01hcdmi.jpg" alt=""></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">13.798</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">14.115</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">14.132</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ true</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">14.150</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true  &lt;--- onTouchEvent</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">14.166</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">14.183</span>  <span class="number">10606</span>-<span class="number">10606</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBT﹕ true</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="u4E0D_u89E6_u53D1_u5237_u65B0"><a href="#u4E0D_u89E6_u53D1_u5237_u65B0" class="headerlink" title="不触发刷新"></a>不触发刷新</h3><p>注意查看<strong>滚动条</strong>。</p>
<h4 id="u5411_u5DE6_u4E0B_u6ED1-1"><a href="#u5411_u5DE6_u4E0B_u6ED1-1" class="headerlink" title="向左下滑"></a><strong>向左下滑</strong></h4><p><img src="http://ww2.sinaimg.cn/bmiddle/7f793092gw1ev34y348moj20u01hc454.jpg" alt=""></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.169</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.249</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.273</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.290</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.307</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.324</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.341</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.358</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.375</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">54.392</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line">...                                                                                           &lt;-- <span class="function"><span class="title">onTouchEvent</span><span class="params">()</span></span> Never Called!</span><br></pre></td></tr></table></figure>
<h4 id="u5411_u53F3_u4E0B_u6ED1-1"><a href="#u5411_u53F3_u4E0B_u6ED1-1" class="headerlink" title="向右下滑"></a><strong>向右下滑</strong></h4><p><img src="http://ww2.sinaimg.cn/bmiddle/7f793092gw1ev34xmt6cjj20u01hcn3w.jpg" alt=""></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">01.868</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">02.028</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">02.050</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">02.067</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">02.084</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">02.102</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">02.119</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">02.136</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line">...                                                                                           &lt;-- <span class="function"><span class="title">onTouchEvent</span><span class="params">()</span></span> Never Called!</span><br></pre></td></tr></table></figure>
<h4 id="u7B14_u76F4_u5411_u4E0B_u6ED1-1"><a href="#u7B14_u76F4_u5411_u4E0B_u6ED1-1" class="headerlink" title="笔直向下滑"></a><strong>笔直向下滑</strong></h4><p><img src="http://ww4.sinaimg.cn/bmiddle/7f793092gw1ev34x7oe5fj20u01hcdm9.jpg" alt=""></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">47.059</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">47.185</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">47.203</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">47.222</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">47.237</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">47.247</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line"><span class="number">08</span>-<span class="number">15</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">47.265</span>  <span class="number">28406</span>-<span class="number">28406</span>/com<span class="class">.example</span><span class="class">.android</span><span class="class">.swiperefreshlayoutbasic</span> D/SSwipeBI﹕ false</span><br><span class="line">...                                                                                           &lt;-- <span class="function"><span class="title">onTouchEvent</span><span class="params">()</span></span> Never Called!</span><br></pre></td></tr></table></figure>
<h3 id="SwipeRefreshLayout__u884C_u4E3A_u603B_u7ED3"><a href="#SwipeRefreshLayout__u884C_u4E3A_u603B_u7ED3" class="headerlink" title="SwipeRefreshLayout 行为总结"></a>SwipeRefreshLayout 行为总结</h3><p>从上面两类大情况，六种小情况来看，它的行为和文档写明的一致：</p>
<ul>
<li><p>触发刷新</p>
<ul>
<li><p>当触屏发生时，事件先到达<code>onInterceptTouchEvent()</code></p>
</li>
<li><p><code>onInterceptTouchEvent()</code>收到事件后，返回<code>false</code>，则此事件会向下传递到 <strong>target view</strong> ,同时使得下一次事件也是也<strong>先经过此方法</strong>。</p>
</li>
<li><p>经过几次事件后<code>onInterceptTouchEvent()</code>返回<code>true</code>，之后的事件都<strong>不再经过此方法</strong>，也不会传给 target view，<strong>直接传给</strong><code>SwipeRefreshLayout.onTouchEvent()</code>。</p>
</li>
<li><p><code>SwipeRefreshLayout.onTouchEvent()</code>接手事件， <strong>target view</strong> 不再收到任何事件，下拉刷新的指示图标开始出现。</p>
</li>
</ul>
</li>
<li><p>不触发刷新</p>
<ul>
<li><p>当触屏发生时，事件先到达<code>onInterceptTouchEvent()</code></p>
</li>
<li><p><code>onInterceptTouchEvent()</code>收到事件后，判读为此次手势没有刷新的意图，一直返回<code>false</code>。</p>
</li>
</ul>
</li>
</ul>
<p><code>onInterceptTouchEvent()</code>返回的结果就是我们要的循环不变量，分析到此差不多就结束了，根据它的行为，可以很轻松的降低它的敏感度。</p>
<h2 id="u964D_u4F4E_SwipeRefreshLayout__u7684_u654F_u611F_u5EA6"><a href="#u964D_u4F4E_SwipeRefreshLayout__u7684_u654F_u611F_u5EA6" class="headerlink" title="降低 SwipeRefreshLayout 的敏感度"></a>降低 SwipeRefreshLayout 的敏感度</h2><p><em>此小节部分内容有关 <code>MotionEvent</code>, 由于篇幅原因不再赘述。详见参考资料。</em></p>
<p>返回我们碰到问题中来，现在有个 WebView 嵌在 SwipeRefreshLayout 中，该 WebView 呈现的网页中有个图片轮播，但我们想切换图片时经常会被 SwipeRefreshLayout 打断，使切换图片的动作成为下来刷新的动作，造成使用体验上的缺陷。</p>
<p>既然 SwipeRefreshLayout 真正接手触屏事件是从 <code>onInterceptTouchEvent()</code> 返回 <code>true</code> 开始的。那我们只要触屏事件开始时判断用户是想刷新还是像切换图片。解决的思路清晰了，接下来是判断的策略</p>
<p>如何判断用户的意图？我们可以简单一点，取从 <code>ACTION_DOWN</code> 开始的两次 <code>ACTION_MOVE</code>,并计算两点所构成的直线同屏幕 <code>X</code> 轴所呈的角度：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">O                 X</span><br><span class="line">  +----------------+</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">  |<span class="string">        M1 +    </span>|</span><br><span class="line">  |<span class="string">         /      </span>|</span><br><span class="line">  |<span class="string">       /ang     </span>|</span><br><span class="line">  |<span class="string">  M2 + ----- X  </span>|</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">  |<span class="string">                </span>|</span><br><span class="line">Y +----------------+</span><br></pre></td></tr></table></figure>
<p>当用户手势的头两次 <code>ACTION_MOVE</code> 构成角度小于 <code>ang</code> 时就让 <code>onInterceptTouchEvent()</code> 一直返回 <code>false</code> 直到 <code>ACTION_UP</code> 为止。这样保证了 SwipeRefreshLayout 不会轻易地截断触屏事件，让 <strong>target view</strong> 有机会处理该事件，同时也保证了循环不变式的成立，不会影响 SwipeRefreshLayout 的正常工作。</p>
<h2 id="SHOW_ME_THE_CODE"><a href="#SHOW_ME_THE_CODE" class="headerlink" title="SHOW ME THE CODE"></a>SHOW ME THE CODE</h2><script src="https://gist.github.com/Overvenus/dc0ec5c4de5c27585c91.js"></script>

<p>欢迎到我的<a href="https://gist.github.com/Overvenus/dc0ec5c4de5c27585c91#file-numbswiperefreshlayout-java" target="_blank" rel="external">Gist</a>查看代码。</p>
<h3 id="NumbSwipeRefreshLayout__u6548_u679C"><a href="#NumbSwipeRefreshLayout__u6548_u679C" class="headerlink" title="NumbSwipeRefreshLayout 效果"></a>NumbSwipeRefreshLayout 效果</h3><p>注意查看<strong>上方阴影</strong>。</p>
<p><img src="http://ww1.sinaimg.cn/bmiddle/7f793092gw1ev3c6eyty8j20u01hc0zi.jpg" alt=""><img src="http://ww4.sinaimg.cn/bmiddle/7f793092gw1ev3c6qlmwhj20u01hcwl4.jpg" alt=""></p>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://android.googlesource.com/platform/frameworks/support/+/d9df810a8e9ac28148c853249f0951329053c784/v4/java/android/support/v4/widget/SwipeRefreshLayout.java" target="_blank" rel="external">SwipeRefreshLayout 源码</a><br><a href="https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html" target="_blank" rel="external">SwipeRefreshLayout 文档</a><br><a href="https://developer.android.com/training/gestures/viewgroup.html" target="_blank" rel="external">Managing Touch Events in a ViewGroup</a><br><a href="https://developer.android.com/reference/android/view/ViewGroup.html#onInterceptTouchEvent(android.view.MotionEvent" target="_blank" rel="external">ViewGroup.onInterceptTouchEvent(MotionEvent)</a><br><a href="https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent" target="_blank" rel="external">View.onTouchEvent(MotionEvent)</a><br><a href="https://developer.android.com/reference/android/view/MotionEvent.html" target="_blank" rel="external">MotionEvent</a><br><a href="http://stackoverflow.com/a/12559204/3920448" target="_blank" rel="external">Calculate gesture distance in Android – Stack Overflow</a><br><a href="http://android-developers.blogspot.com/2010/06/making-sense-of-multitouch.html" target="_blank" rel="external">Making Sense of Multitouch</a><br><a href="https://en.wikipedia.org/wiki/False_positives_and_false_negatives" target="_blank" rel="external">False positives and false negatives</a></p>
</blockquote>
<p>个人笔记，难免有误，如有发现，还望指出。<br>END.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="PullToRefresh__u4E0E_SwipeRefreshLayout"><a href="#PullToRefresh__u4E0E_SwipeRefreshLayout" class="headerlink" title="PullToRefresh 与 SwipeRefreshLayout"></a>PullToRefresh 与 SwipeRefreshLayout</h2><p>这段时间我在 Easyinking 公司实习， 做安卓开发。之前的 App 中大量使用 <a href="https://github.com/chrisbanes/Android-PullToRefreshhttps://github.com/chrisbanes/Android-PullToRefresh">Android-PullToRefresh</a>。这个轮子很经典，在较久版本的安卓上面也很好使，不过作者已经放弃维护了，在我们的 App 上也发现了一个诡异的BUG：与WebView配合使用时，在网络环境差的情况下会出现一次下拉多次刷新的情况，症状就是整个网页在那上下抽搐。在官方支持库 support-v4:22 中自带了一个类似的 SwipeRefreshLayout，效果也是一级棒。由于两者的 API 设计差不多，使用的情景也几乎一样，所以可以无痛地从 <a href="https://github.com/chrisbanes/Android-PullToRefreshhttps://github.com/chrisbanes/Android-PullToRefresh">PullToRefresh</a> 转移过来。</p>
<h2 id="u654F_u611F_u7684_SwipeRefreshLayout"><a href="#u654F_u611F_u7684_SwipeRefreshLayout" class="headerlink" title="敏感的 SwipeRefreshLayout"></a>敏感的 SwipeRefreshLayout</h2><p>从 PullToRefresh 转移到 SwipeRefreshLayout 大概花了十来分钟，初步测试出来的效果也令人满意。但是，实际使用中总会有意想不到的问题。我们把一个WebView放在了 SwipeRefreshLayout 中， 该 WebView 呈现的网页中有一个图片轮播，可左右滑动，下面的问题是 SwipeRefreshLayout 过于敏感，它把稍有下拉倾向的左右滑动全部拦截掉，并把他们当作下拉的手势，典型的 False Positive ， 处理的思路也很简单，既然是误报，过滤之即可。</p>
<h3 id="u8BEF_u62A5_u7684_u624B_u52BF"><a href="#u8BEF_u62A5_u7684_u624B_u52BF" class="headerlink" title="误报的手势"></a><strong>误报的手势</strong></h3><p><img src="http://ww1.sinaimg.cn/bmiddle/7f793092gw1ev1xydoiwoj20u01hcwoe.jpg" alt=""><img src="http://ww3.sinaimg.cn/bmiddle/7f793092gw1ev1ys28bm4j20u01hc12q.jpg" alt=""></p>
<h3 id="u7406_u60F3_u4E2D_u7684_u624B_u52BF"><a href="#u7406_u60F3_u4E2D_u7684_u624B_u52BF" class="headerlink" title="理想中的手势"></a><strong>理想中的手势</strong></h3><p><img src="http://ww1.sinaimg.cn/bmiddle/7f793092gw1ev1ytgovwpj20u01hcgve.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://neilsh.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GOTO与拓扑排序]]></title>
    <link href="http://neilsh.me/2015/07/04/goto_and_topological_sorting/"/>
    <id>http://neilsh.me/2015/07/04/goto_and_topological_sorting/</id>
    <published>2015-07-04T14:26:00.000Z</published>
    <updated>2015-11-07T04:04:21.000Z</updated>
    <content type="html"><![CDATA[<p>##goto in C<br><code>goto</code>在C语言中可以实现无限制跳转，现在有很多人都建议在实际编程中使用它，因为它会使程序的控制流程(control flow)变得混乱，难以阅读。</p>
<p>###goto, break, continue<br><code>goto</code>,<code>break</code>,<code>continue</code> 三者都可以打断控制流程，但后两者都是有限制的，只能打断当前的<code>{}</code>(scope)。<br><code>continue</code> 只能写在loop里，不然编译报：continue statement not within loop，<br><code>break</code>只能写在loop或者switch中，不然编译报：break statement not within loop or switch。<br><code>goto</code>则不同，它可写在和跳转到函数的任意行，自由度极大，一个不小心就会有bug，这样的代码通常也难以维护。不过用的好当然也可以增加效率的同时提到可读性。<br><a id="more"></a></p>
<blockquote>
<p>I think goto’s are fine, and they are often more readable than large<br>amounts of indentation. That’s <em>especially</em> true if the code flow isn’t<br>actually naturally indented (in this case it is, so I don’t think using<br>goto is in any way <em>clearer</em> than not, but in general goto’s can be quite<br>good for readability).<br>—Linus</p>
</blockquote>
<p>##拓扑排序<br>《算法导论》中拓扑排序的例子，粉色的是各物件的依赖图，青色的是拓扑排序图。<br><img src="http://ww4.sinaimg.cn/large/7f793092gw1ets46e3xppj20ok0kcq4d.jpg" alt=""><br>根据图，如果还没穿内裤，拿就必须要穿内裤那个节点开始走起；如果已经穿好内裤和裤子了，那从腰带开始走起便可。<br>可以看出，拓扑排序图中的各物件的依赖关系与箭头相反，不管从哪点进入，最终的还是会到同一个节点。</p>
<p>##内存管理引发的思考<br>在JOS的内存管理模块中，有一个<code>page_insert</code>的函数，它负责记录<code>page</code>的地址和权限，这个函数最终的结果只有一个，但输入有多种情况，为了处理这些情况，势必要写多个判断。<br>插入的<code>pagetable</code>中对应该<code>page</code>的条目是否有旧纪录？如果没有直接插入，设置权限，结束；如果有，是否同一个<code>page</code>，如果同一个，设置新权限，结束；如果不是同一个，删掉旧记录，插入该<code>page</code>地址，设置权限，结束。<br>大致的逻辑请看下图：<br><img src="http://ww3.sinaimg.cn/large/7f793092gw1etufs6cjxnj20av0m1gmq.jpg" alt=""></p>
<p>从描述可知，只有条件跳转来处理这些情况会有许多重复的代码，而且不直观，难以理解。</p>
<p>###不用<code>goto</code>的<code>page_insert</code><br>无<code>goto</code>，但代码重复，判断层级过多，不易理解。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">page_insert</span><span class="params">(pde_t *pgdir, <span class="keyword">struct</span> PageInfo *pp, <span class="keyword">void</span> *va, <span class="keyword">int</span> perm)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">pte_t</span> *va_pte = pgdir_walk(pgdir, va, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (! va_pte)</span><br><span class="line">		<span class="comment">// E_NO_MEM, if page table couldn't be allocated</span></span><br><span class="line">		<span class="keyword">return</span> -E_NO_MEM;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">physaddr_t</span> pp_pa = page2pa(pp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((*va_pte) &amp; PTE_P) &#123;</span><br><span class="line">		<span class="comment">// There is something in this pte.</span></span><br><span class="line">		<span class="keyword">if</span> (PTE_ADDR(*va_pte) == pp_pa) &#123;</span><br><span class="line">			<span class="comment">// Re-insert</span></span><br><span class="line">			*va_pte = pp_pa | perm | PTE_P;</span><br><span class="line">			<span class="keyword">if</span> (perm | PTE_U)</span><br><span class="line">				<span class="comment">// Changes to User Table</span></span><br><span class="line">				pgdir[PDX(va)] |= PTE_U;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Different page</span></span><br><span class="line">		page_remove(pgdir, va);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Nothing in this PTE</span></span><br><span class="line">	*va_pte = pp_pa | perm | PTE_P;</span><br><span class="line">	<span class="keyword">if</span> (perm | PTE_U)</span><br><span class="line">		<span class="comment">// Changes to User Table</span></span><br><span class="line">		pgdir[PDX(va)] |= PTE_U;</span><br><span class="line"></span><br><span class="line">	pp-&gt;pp_ref += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>###使用<code>goto</code>的<code>page_insert</code><br>有<code>goto</code>，但代码不重复，跳转层级少，直观。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">page_insert</span><span class="params">(pde_t *pgdir, <span class="keyword">struct</span> PageInfo *pp, <span class="keyword">void</span> *va, <span class="keyword">int</span> perm)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">pte_t</span> *va_pte = pgdir_walk(pgdir, va, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (! va_pte)</span><br><span class="line">		<span class="comment">// E_NO_MEM, if page table couldn't be allocated</span></span><br><span class="line">		<span class="keyword">return</span> -E_NO_MEM;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">physaddr_t</span> pp_pa = page2pa(pp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (! (*va_pte) &amp; PTE_P)</span><br><span class="line">		<span class="comment">// Nothing in this PTE</span></span><br><span class="line">		<span class="keyword">goto</span> nonpresent;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// There is something in this pte.</span></span><br><span class="line">	<span class="keyword">if</span> (PTE_ADDR(*va_pte) == pp_pa)</span><br><span class="line">		<span class="comment">// Re-insert</span></span><br><span class="line">		<span class="keyword">goto</span> present_same;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="comment">// Different page</span></span><br><span class="line">		<span class="keyword">goto</span> present_different;</span><br><span class="line"></span><br><span class="line">	present_different:</span><br><span class="line">		page_remove(pgdir, va);</span><br><span class="line"></span><br><span class="line">	nonpresent:</span><br><span class="line">		*va_pte = pp_pa;</span><br><span class="line">		pp-&gt;pp_ref += <span class="number">1</span>;</span><br><span class="line">		tlb_invalidate(pgdir, va);</span><br><span class="line"></span><br><span class="line">	present_same:</span><br><span class="line">		*va_pte = pp_pa | perm | PTE_P;</span><br><span class="line">		<span class="keyword">if</span> (perm &amp; PTE_U)</span><br><span class="line">			<span class="comment">// Commits to User Table</span></span><br><span class="line">			pgdir[PDX(va)] |= PTE_U;</span><br><span class="line">		<span class="keyword">if</span> (perm &amp; PTE_W)</span><br><span class="line">			pgdir[PDX(va)] |= PTE_W;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>##总结</p>
<ul>
<li><code>goto</code>最好与判断写在一起，方便从语意理解此语句。</li>
<li>如果出口只有一个，进口有多个，可适当用<code>goto</code>，符合DRY。</li>
</ul>
<p>###Another fancy case<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error handler</span></span><br><span class="line">swith(i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        foo();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        bar();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        n = dosth_1();</span><br><span class="line">        <span class="keyword">if</span> (n)</span><br><span class="line">            <span class="keyword">goto</span> bad;</span><br><span class="line">        n = dosth_2();</span><br><span class="line">        <span class="keyword">if</span> (n)</span><br><span class="line">            <span class="keyword">goto</span> bad:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    bad:</span><br><span class="line">        report();</span><br><span class="line">        <span class="keyword">end_t</span>his();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>###更多资料</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Gotohttps://en.wikipedia.org/wiki/Goto" target="_blank" rel="external">https://en.wikipedia.org/wiki/Gotohttps://en.wikipedia.org/wiki/Goto</a><br><a href="https://en.wikipedia.org/wiki/Topological_sorting" target="_blank" rel="external">https://en.wikipedia.org/wiki/Topological_sorting</a><br><a href="https://web.archive.org/web/20051128093253/http://kerneltrap.org/node/553/2131" target="_blank" rel="external">https://web.archive.org/web/20051128093253/http://kerneltrap.org/node/553/2131</a><br>Knuth, Donald E. “Structured Programming with go to Statements.” ACM Computing Surveys (CSUR) 6, no. 4 (1974): 261-301.</p>
</blockquote>
<p>个人笔记，难免有误，如有发现，还望指出。<br>END.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##goto in C<br><code>goto</code>在C语言中可以实现无限制跳转，现在有很多人都建议在实际编程中使用它，因为它会使程序的控制流程(control flow)变得混乱，难以阅读。</p>
<p>###goto, break, continue<br><code>goto</code>,<code>break</code>,<code>continue</code> 三者都可以打断控制流程，但后两者都是有限制的，只能打断当前的<code>{}</code>(scope)。<br><code>continue</code> 只能写在loop里，不然编译报：continue statement not within loop，<br><code>break</code>只能写在loop或者switch中，不然编译报：break statement not within loop or switch。<br><code>goto</code>则不同，它可写在和跳转到函数的任意行，自由度极大，一个不小心就会有bug，这样的代码通常也难以维护。不过用的好当然也可以增加效率的同时提到可读性。<br>]]>
    
    </summary>
    
      <category term="Algorithms" scheme="http://neilsh.me/tags/Algorithms/"/>
    
      <category term="C" scheme="http://neilsh.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[内核的启动和建立虚拟内存]]></title>
    <link href="http://neilsh.me/2015/07/02/os_setup_and_virtual_memory_setup/"/>
    <id>http://neilsh.me/2015/07/02/os_setup_and_virtual_memory_setup/</id>
    <published>2015-07-02T10:02:00.000Z</published>
    <updated>2015-11-07T04:04:21.000Z</updated>
    <content type="html"><![CDATA[<p>##引言<br>这篇博文写 JOS 如何建立虚拟内存，同时也是 MIT6.828 Lab2 的答案。<br>JOS 是 MIT6.828 操作系统课程中给学生练习用的小型内核。JOS 是一个 X86 平台的32位操作系统，它是根据 Unix 第6版 设计的，也就是这篇paper <a href="http://pdos.csail.mit.edu/6.828/2014/readings/ritchie78unix.pdf" target="_blank" rel="external">The UNIX Time-Sharing System</a>。</p>
<p>##MMU的工作机制<br><code>MMU</code>是 x86 CPU 集成的一个硬件，负责把虚拟地址翻译成物理地址。增加一层翻译不是会降低性能，那为什么不直接用物理地址？这是因为设计 Computer 和 OS 的 Scientists 为了实现不同应用程序之间的 isolation 以增加 safety 和降低应用程序的 Complexity。<br><code>MMU</code>在计算机启动初期是不工作的，只有寄存器<code>cr0</code>中的flag打开，它才会工作。</p>
<p>本文写最简单的32位虚拟内存机制，同样也是 JOS 用的。<br>先祭出一张神图，这张图生动形象的说明了<code>MMU</code>的工作流程：<br><a id="more"></a><br><img src="http://ww1.sinaimg.cn/large/7f793092gw1etosykok6uj216o1kwdq0.jpg" alt=""><br>术语说明：</p>
<blockquote>
<p><code>page</code>: <code>MMU</code> 在逻辑上把内存分割为一个一个4KB大小的块。<br><code>page table</code>: 一个 <code>page</code>，大小4KB，内容是<em>1024个</em>指向不同 <code>page</code> 的地址及其权限。<br><code>page directory</code>：一个 <code>page</code>，大小4KB，内容是<em>1024个</em>指向不同 <code>page table</code> 的地址及其权限。<br><code>cr3</code>: x86 CPU 中的一个寄存器，存有一个32位的地址，指向一个 <code>page directory</code>。</p>
</blockquote>
<p>单个<code>page</code>的寻址：</p>
<blockquote>
<p>4KB = 4096 = 0x1000</p>
</blockquote>
<p>由于每一个 <code>page</code> 都是4KB，它们的起始地址是<em>0x?????000</em>，以3个0x0结尾，所以<em>真正有效</em>的数据是前20bits。之后的12bits可用来设置该 <code>page</code>的权限。这也解释了为什么神图中仅靠前20bits的<code>PPN</code>就能找到对应的<code>page</code>。</p>
<p>一个<code>page directory</code>足以映射4GB的内存：</p>
<blockquote>
<p>1 x 1024 x 1024 x (4 x 1024) = 4GB<br>one <code>cr3</code> points to one <code>page directory</code><br>one <code>page directory</code> has 1024 <code>page tables</code><br>one <code>page table</code> has 1024 <code>pages</code><br>one <code>page</code> has 4KB memory</p>
</blockquote>
<p>##BootLoader 到内核<br>BIOS 把硬盘第一个扇区的数据(BootLoader)加载到内存物理地址<code>0x7c00</code>后，便把<code>eip = 7c00</code>，CPU 开始执行内存<code>7c00</code>处(BootLoader)的代码，此时 CPU 还未开启 <code>PAGING</code>，并处于16位模式。BootLoager要做的就是关闭中断，开启保护模式，进入32位工作状态，并且把硬盘中的内核加载代内存<code>0x10000</code>处，然后把硬件的使用权移交给内核。</p>
<p>##内核初期的内存映射</p>
<p>###开启 MMU<br>内核接管硬件后，所有的地址都是物理地址，<code>eip</code>寄存器指向物理地址的内核指令。之后，内核第一时间开启了<code>MMU</code>。下面是 JOS 内核启动的头几条汇编代码，在<code>entry.S</code>文件中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line"><span class="preprocessor"># The Multiboot header</span></span><br><span class="line">.align <span class="number">4</span></span><br><span class="line">.<span class="keyword">long</span> MULTIBOOT_HEADER_MAGIC</span><br><span class="line">.<span class="keyword">long</span> MULTIBOOT_HEADER_FLAGS</span><br><span class="line">.<span class="keyword">long</span> CHECKSUM</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># '_start' specifies the ELF entry point.  Since we haven't set up</span></span><br><span class="line"><span class="preprocessor"># virtual memory when the bootloader enters this code, we need the</span></span><br><span class="line"><span class="preprocessor"># bootloader to jump to the *physical* address of the entry point.</span></span><br><span class="line">.globl		_start</span><br><span class="line">_start = RELOC(entry)</span><br><span class="line"></span><br><span class="line">.globl entry</span><br><span class="line">entry:</span><br><span class="line">	movw	$<span class="number">0x1234</span>,<span class="number">0x472</span>			<span class="preprocessor"># warm boot</span></span><br><span class="line"></span><br><span class="line">    <span class="preprocessor"># entry_pgdir 是 page directory，被硬编码在内核中。</span></span><br><span class="line">	movl	$(RELOC(entry_pgdir)), %eax</span><br><span class="line">	movl	%eax, %cr3</span><br><span class="line">	<span class="preprocessor"># Turn on paging.  开启 PAGING</span></span><br><span class="line">	movl	%cr0, %eax</span><br><span class="line">	orl	$(CR0_PE|CR0_PG|CR0_WP), %eax</span><br><span class="line">	movl	%eax, %cr0</span><br><span class="line"><span class="preprocessor">#接下面的汇编代码</span></span><br></pre></td></tr></table></figure></p>
<p>但此时虚拟内存还没有建立，代码操作的地址还是物理地址，所用的 page directory 及 page table 硬编码在内核中，虚拟地址和物理地址是<em>一对一且连续映射</em>的。<br>下面是硬编码在内核中的 page directory。大意就是虚拟地址<code>0x0000 0000～0x0040 0000</code>和<code>0xF000 0000～0xF040 0000</code>都映射到物理地址<code>0x0000 0000～0x0040 0000</code>，且是<em>连续一对一映射</em>。换句话说，整个内核的虚拟地址就是物理地址加上<code>KERNBASE</code>，详细下面内核结构会解释。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> KERNBASE 0xF0000000</span></span><br><span class="line">__attribute__((__aligned__(PGSIZE)))  <span class="comment">// 4KB 对齐</span></span><br><span class="line"><span class="keyword">pde_t</span> entry_pgdir[<span class="number">1024</span>] = &#123;</span><br><span class="line">	<span class="comment">// Map VA's [0, 4MB) to PA's [0, 4MB)</span></span><br><span class="line">	[<span class="number">0</span>]</span><br><span class="line">		= ((<span class="keyword">uintptr_t</span>)entry_pgtable - KERNBASE) + PTE_P,</span><br><span class="line">	<span class="comment">// Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)</span></span><br><span class="line">	[KERNBASE&gt;&gt;<span class="number">22</span>]</span><br><span class="line">		= ((<span class="keyword">uintptr_t</span>)entry_pgtable - KERNBASE) + PTE_P + PTE_W</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>不过这样做还是有问题，这个 page directory 及其 page table 必须要在内存开始的头4MB之内，不然MMU就会报错。不过幸好，我们的内核还不大，4MB足够装下，实际上还有许多空闲的空间。</p>
<p>###工作在虚拟地址<br>开启<code>MMU</code>后，所有对内存的操作都会经过翻译，CPU 的<code>eip</code>寄存器还是指向低位的物理地址，为了后续代码的正常工作，我们要把它转化为指向高位的虚拟地址，在 JOS 这个转化很简单，其实质就是加上<code>KERNBASE</code>，理由见上面<code>entry_pgdir</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#接上面的汇编代码。</span></span><br><span class="line">	<span class="preprocessor"># Now paging is enabled, but we're still running at a low EIP</span></span><br><span class="line">	<span class="preprocessor"># (why is this okay?).  Jump up above KERNBASE before entering</span></span><br><span class="line">	<span class="preprocessor"># C code.</span></span><br><span class="line">	mov	$relocated, %eax</span><br><span class="line">	jmp	*%eax</span><br><span class="line">relocated:  <span class="preprocessor"># 此处的虚拟地址=物理地址+KERNBASE</span></span><br><span class="line">    <span class="preprocessor"># ...</span></span><br></pre></td></tr></table></figure>
<p><code>jmp</code>之后内存就正式工作完成初期的<code>PAGING</code>。<br>为什么要<code>jmp</code>一下（疑惑脸）？请看<code>内核的结构</code>。</p>
<p>###内核的结构<br>我<em>认为（可能有错，还没学过编译）</em>：</p>
<blockquote>
<p>JOS 的内核是虚拟按地址链接的，所有<code>symbol</code>（，代码和静态变量？）的地址都是虚拟地址（对于内核初期来说）。</p>
</blockquote>
<p>这句话是什么意思？请看内核的链接文件。<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ENTRY<span class="params">(_start)</span></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* Link the kernel at this address: "." means the current address */</span></span><br><span class="line">	. = <span class="number">0</span>xF0100000;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* AT(...) gives the load address of this section, which tells</span><br><span class="line">	   the boot loader where to load the kernel in physical memory */</span></span><br><span class="line">	.<span class="built_in">text</span> : AT<span class="params">(<span class="number">0</span>x100000)</span> &#123;</span><br><span class="line">		<span class="built_in">*</span><span class="params">(.text .stub .text.* .gnu.linkonce.t.*)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	PROVIDE<span class="params">(etext = .)</span>;	<span class="comment">/* Define the 'etext' symbol to this value */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure></p>
<p>用这链接文件编译出的内核的 section headers 如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -h obj/kern/kernel&#10;&#10;obj/kern/kernel:     file format elf32-i386&#10;Sections:&#10;Idx Name          Size      VMA       LMA       File off  Algn&#10;  0 .text         00001947  f0100000  00100000  00001000  2**4&#10;                  CONTENTS, ALLOC, LOAD, READONLY, CODE&#10;  1 .rodata       00000770  f0101960  00101960  00002960  2**5&#10;                  CONTENTS, ALLOC, LOAD, READONLY, DATA&#10;  2 .stab         00003919  f01020d0  001020d0  000030d0  2**2&#10;                  CONTENTS, ALLOC, LOAD, READONLY, DATA&#10;  3 .stabstr      00001907  f01059e9  001059e9  000069e9  2**0&#10;                  CONTENTS, ALLOC, LOAD, READONLY, DATA&#10;  4 .data         0000a300  f0108000  00108000  00009000  2**12&#10;                  CONTENTS, ALLOC, LOAD, DATA&#10;  5 .bss          00000644  f0112300  00112300  00013300  2**5&#10;                  ALLOC&#10;  6 .comment      00000024  00000000  00000000  00013300  2**0&#10;                  CONTENTS, READONLY</span><br></pre></td></tr></table></figure>
<p><code>VMA</code>：virtual memory address | <code>LMA</code>：load memory address<br><code>0 .text         00001947  f0100000  00100000  00001000  2**4</code>，<br><code>.text</code>的虚拟地址是<code>0xf0100000</code>，加载地址（执行地址）<code>0x00100000</code>。<br>内核的第一条指令在内存<code>0x00100000</code>处，<code>eip = 0x00100000</code>，虚拟地址是<code>0xf0100000</code>。</p>
<p>再看内核的 symbol table：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -t obj/kern/kernel | sed &#39;1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d&#39;&#10;addr.      sym.&#10;0010000c T _start&#10;f010000c T entry&#10;f010002f t relocated&#10;f010003e t spin&#10;f0100040 T i386_init&#10;f0100094 T _panic&#10;f01000f3 T _warn&#10;...</span><br></pre></td></tr></table></figure>
<p><code>0010000c T _start</code> 和 <code>f010000c T entry</code> 它们就是上面的汇编代码中的<code>_start</code> 和 <code>entry</code>。<br>这意味着 <code>0010000c</code> 和 <code>f010000c</code> 指向的是同一处。因为内核从<code>f010000c</code>开始链接，所以<code>relocated</code>处于高位（即虚拟地址）。<code>jmp</code>是为了使<code>eip</code>指向虚拟地址的内核代码。<code>mov</code>是为了防止 assembler 把<code>jmp</code>“优化”掉。</p>
<p>###内核建立虚拟内存<br>完成上面的工作之后，内核开始建立虚拟内存。<br><code>pmap.c</code>是 JOS 的内存管理的源码文件。下面是一些关键的全局变量。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// These variables are set by i386_detect_memory()</span></span><br><span class="line"><span class="keyword">size_t</span> npages;			<span class="comment">// Amount of physical memory (in pages)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">size_t</span> npages_basemem;	<span class="comment">// Amount of base memory (in pages)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// These variables are set in mem_init()</span></span><br><span class="line"><span class="keyword">pde_t</span> *kern_pgdir;		<span class="comment">// Kernel's initial page directory</span></span><br><span class="line"><span class="comment">// 用来代表`page`的结构体</span></span><br><span class="line"><span class="keyword">struct</span> PageInfo *pages;		<span class="comment">// Physical page state array</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> PageInfo *page_free_list;	<span class="comment">// Free list of physical pages</span></span><br></pre></td></tr></table></figure>
<p><code>void mem_init(void);</code>这函数初始化硬件的全部内存并建立虚拟内存。下面我节选了部分代码。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mem_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Find out how much memory the machine has (npages &amp; npages_basemem).</span></span><br><span class="line">	<span class="comment">// 首先探测所有的机器有多少内存</span></span><br><span class="line">	i386_detect_memory();</span><br><span class="line">	<span class="comment">//////////////////////////////////////////////////////////////////////</span></span><br><span class="line">	<span class="comment">// create initial page directory.</span></span><br><span class="line">	<span class="comment">// 用一个简易的 alloc 函数为变量`kern_pgdir`申请一个`page`，</span></span><br><span class="line">	<span class="comment">// 此`page`在kernel之后。`kern_pgdir`指向一个高位的虚拟地址。</span></span><br><span class="line">	kern_pgdir = (<span class="keyword">pde_t</span> *) boot_alloc(PGSIZE);</span><br><span class="line">	<span class="built_in">memset</span>(kern_pgdir, <span class="number">0</span>, PGSIZE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 把`kern_pgdir`所在的 page 的低位物理地址插入到`kern_pgdir`对应的槽中，</span></span><br><span class="line">	<span class="comment">// 并设置权限。Permissions: kernel R, user R</span></span><br><span class="line">	kern_pgdir[PDX(UVPT)] = PADDR(kern_pgdir) | PTE_U | PTE_P;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 为`PageInfo`申请空间，物理内存有多少就申请多少个`PageInfo`，这个链表在`kern_pgdir`之后</span></span><br><span class="line">	<span class="comment">// 这些`PageInfo`是为了新的内存管理机制做准备的，用以跟踪各`page`的使用情况。</span></span><br><span class="line">	pages = (<span class="keyword">struct</span> PageInfo *)boot_alloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> PageInfo) * npages);</span><br><span class="line">	<span class="comment">// 等等。。。</span></span><br><span class="line">```	</span><br><span class="line"></span><br><span class="line">此时的物理内存的使用情况是这样的：</span><br></pre></td></tr></table></figure>
<pre><code>[BASEMEM] &lt;------------- 0x00000000
...
...   640KB
...
[IOPHYSMEM] &lt;----------- 0x000A0000
...
...   I/O hole
...
[EXTPHYSMEM] &lt;---------- 0x00100000
...
extern char entry[]; &lt;-- 0x0010000c
...
...   kernel
...
extern char end[]; &lt;---- 0x00113970
...
...   由于4KB对齐，这会有空白
...
`kern_pgdir`
...
....  one page gap
...
`pages` itself!
...   used!
...   ...
...   used!
...   unused!
</code></pre><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">之后的一些函数根据上面的图把已用的内存记录到`kern_pgdir`和`pagetable`中并设置权限。记录的方法大致是这样的：</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="comment">// addr &gt;&gt; 22 取前10位</span></span><br><span class="line"><span class="comment">// (addr &gt;&gt;12) &amp; 0x3FF 取中间10位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// log virtual_addr</span></span><br><span class="line">pagetable_phys_addr = kern_pgdir[virtual_addr&gt;&gt;<span class="number">22</span>]</span><br><span class="line">pagetable_phys_addr[<span class="params">(virtual_addr&gt;&gt;<span class="number">12</span>)</span> &amp; <span class="number">0</span>x3FF] = page_phys_addr</span><br><span class="line"></span><br><span class="line"><span class="comment">// `MMU` workflow</span></span><br><span class="line"><span class="comment">// virtual_addr to physical_addr</span></span><br><span class="line">pagetable_phys_addr = kern_pgdir[<span class="params">(virtual_addr)</span>&gt;&gt;<span class="number">22</span>]</span><br><span class="line">page_phys_addr = pagetable[<span class="params">(virtual_addr&gt;&gt;<span class="number">12</span>)</span> &amp; <span class="number">0</span>x3FF]</span><br><span class="line">physical_addr = <span class="params">(page_phy_addr &amp; <span class="number">0</span>x3FF)</span> | <span class="params">(virtual_addr &amp; <span class="number">0</span>xFFFFFC00)</span></span><br></pre></td></tr></table></figure>
<p>最后，内核实现了虚拟内存，并能动态分配，可以多个虚拟地址指向同一物理地址。JOS 这种的管理方式使得<code>page</code>只有在被使用时才会记录到<code>pagetable</code>中，类似于 lazy initialization。<br>这种虚拟地址的记录方式也同样解释了为什么程序在使用一个野指针的时候会退出，因为这个野指针指向的地址该程序无权访问的可能性很大，一旦访问<code>MMU</code>会报<code>pagefault</code>，从而使程序退出。</p>
<p>完整的 pmap.c 文件在<a href="/asset/code/pmap.c">这可以获取</a>，里面有比较完整的注释。</p>
<p>##总结</p>
<p>JOS 内核一启动就开启<code>MMU</code>，用的<code>page directory</code>是手写的预先编译在内核中的。之后再建立一个新的<code>page directory</code>，这个<code>page directory</code>是可以动态增加减少记录的，此时 JOS 内存的初始化算是完成了。</p>
<p>个人笔记，难免有误，如有发现，还望指出。<br>END.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##引言<br>这篇博文写 JOS 如何建立虚拟内存，同时也是 MIT6.828 Lab2 的答案。<br>JOS 是 MIT6.828 操作系统课程中给学生练习用的小型内核。JOS 是一个 X86 平台的32位操作系统，它是根据 Unix 第6版 设计的，也就是这篇paper <a href="http://pdos.csail.mit.edu/6.828/2014/readings/ritchie78unix.pdf">The UNIX Time-Sharing System</a>。</p>
<p>##MMU的工作机制<br><code>MMU</code>是 x86 CPU 集成的一个硬件，负责把虚拟地址翻译成物理地址。增加一层翻译不是会降低性能，那为什么不直接用物理地址？这是因为设计 Computer 和 OS 的 Scientists 为了实现不同应用程序之间的 isolation 以增加 safety 和降低应用程序的 Complexity。<br><code>MMU</code>在计算机启动初期是不工作的，只有寄存器<code>cr0</code>中的flag打开，它才会工作。</p>
<p>本文写最简单的32位虚拟内存机制，同样也是 JOS 用的。<br>先祭出一张神图，这张图生动形象的说明了<code>MMU</code>的工作流程：<br>]]>
    
    </summary>
    
      <category term="C" scheme="http://neilsh.me/tags/C/"/>
    
      <category term="C.S.笔记" scheme="http://neilsh.me/tags/C-S-%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MIT" scheme="http://neilsh.me/tags/MIT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://neilsh.me/2015/06/29/hello-world/"/>
    <id>http://neilsh.me/2015/06/29/hello-world/</id>
    <published>2015-06-29T13:36:00.000Z</published>
    <updated>2015-11-07T04:04:21.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
  </entry>
  
</feed>
