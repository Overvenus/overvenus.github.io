<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mit on Neil</title>
    <link>http://neilsh.com/tags/mit/</link>
    <description>Recent content in Mit on Neil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 30 Aug 2015 15:39:38 +0800</lastBuildDate>
    <atom:link href="http://neilsh.com/tags/mit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Few words about 6.828</title>
      <link>http://neilsh.com/2015/08/30/about-6828/</link>
      <pubDate>Sun, 30 Aug 2015 15:39:38 +0800</pubDate>
      
      <guid>http://neilsh.com/2015/08/30/about-6828/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been working on JOS, which is part of &lt;a href=&#34;http://pdos.csail.mit.edu/6.828/2014/index.html&#34;&gt;6.828: Operating System Engineering&lt;/a&gt;. 6.828 is a great course about OS, it brings principle to practice, you will implement a simple OS in this course. It also talks about the most fancy research of OS. I recommend every CS sutdent to take this course.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;6-828简介:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;6.828简介&lt;/h2&gt;

&lt;p&gt;好了，装逼完毕。我认真说说最近上的这门课，6.828是 MIT 开放课程中的一部分，它开放了所有关于该课程的资料，包括上课视频。我个人认为这是一门极好的关于操作系统课程，经典书籍上的知识在这将不再枯燥，它是一门操作系统课程，同时也广泛地涉及了CS中的其他内容，包括但不限于网络，安全，分布式计算等等。&lt;/p&gt;

&lt;h2 id=&#34;知新:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;知新&lt;/h2&gt;

&lt;h3 id=&#34;寻找资料的正确姿势:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;寻找资料的正确姿势&lt;/h3&gt;

&lt;p&gt;课程实验中有许多地方并没有说得很仔细，只有大概的意图，实现的细节需要你自己去查阅资料。比如说汇编里面的 &lt;code&gt;call&lt;/code&gt; &lt;code&gt;ret&lt;/code&gt; 对 &lt;code&gt;ESP&lt;/code&gt;&lt;code&gt;EBP&lt;/code&gt;&lt;code&gt;EIP&lt;/code&gt;三个寄存器的影响，它指出了这两个指令于函数调用上、传递参数有关，然后它让你写一个栈回溯函数。
Google &lt;code&gt;ret call&lt;/code&gt; 的第一个结果：&lt;a href=&#34;http://www.c-jump.com/CIS77/ASM/Procedures/P77_0010_call_ret.htm&#34;&gt;CALL and RET Instructions&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CALL pushes the return address onto the stack and transfers control to a procedure.
RET pops the return address off the stack and returns control to that location.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;嗯，很好，把 &lt;code&gt;call&lt;/code&gt; 和 &lt;code&gt;ret&lt;/code&gt; 所干的事说了一下，但是太模糊了，比如说 return address 指向哪里，怎样来 transfers control ， pops the return address 到哪里？这些都没有说清楚。对于初学者来说，这个结果只能做参考，并不能直接拿来用。
后来经过一番查找后找到了图文并茂的资料。&lt;a href=&#34;http://unixwiz.net/techtips/win32-callconv-asm.html&#34;&gt;Intel x86 Function-call Conventions - Assembly View&lt;/a&gt; 其中 Calling a __cdecl function 那一节讲得很清楚:
&lt;img src=&#34;http://ww1.sinaimg.cn/large/7f793092gw1evo1wpue9bg20770cm3yd.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;16(%ebp) - third function parameter
12(%ebp) - second function parameter
8(%ebp)  - first function parameter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一图胜千言，函数调用，参数传递，&lt;code&gt;ESP&lt;/code&gt;&lt;code&gt;EBP&lt;/code&gt;&lt;code&gt;EIP&lt;/code&gt;都给说明白了。对比一下前面引用的资料，完全符合。现在我们可以理解，为什么栈要从高向低生长，C 语言中参数为什么从右向左压入栈，函数内的本地变量占用的内存为什么不需要手动管理，这一切都是紧密相关的。&lt;/p&gt;

&lt;h3 id=&#34;c-的黑魔法:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;C 的黑魔法&lt;/h3&gt;

&lt;p&gt;C 语言作为入门课在大一上学期时就学了，教材是谭浩强的，他的书在网上被喷的狗血淋头，我也觉得这不是本好教材，借了本 B&amp;amp;D 的 《The C Programming Language》，囫囵吞枣地看了一遍，指针、结构体、联合体、枚举等概念倒背如流，期末的时候拿了高分，自以为 C 学得还不错。现在想来，那时还是太年轻，操作系统里漫天的指针，结构体、联合体互相的嵌套更是少不了，各种神奇的写法见都没见过。下面来几个简单的例子：&lt;/p&gt;

&lt;h4 id=&#34;给结构体初始化时给指定成员赋值:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;给结构体初始化时给指定成员赋值：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct foo {
    int i;
    unsigned u;
    char *str;
};

int bar(void) {
    char *s = &amp;quot;Hello!&amp;quot;;
    struct foo f = {
        .str = s;
    };
    return 0; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;跨源文件调用匿名结构体变量:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;跨源文件调用匿名结构体变量：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 定义在 a.c 中
struct {
    int i;
    unsigned us[99];
} foo;

// 在 b.c 中
extern struct {
    int i;
    unsigned us[99];
} foo;

int bar(void) {
    printf(&amp;quot;%d\n&amp;quot;, foo.i);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;关键字-volatile:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;关键字 volatile&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;the volatile keyword indicates that a value may change between different accesses, even if it does not appear to be modified. This keyword prevents an optimizing compiler from optimizing away subsequent reads or writes and thus incorrectly reusing a stale value or omitting writes.    &amp;ndash; &lt;a href=&#34;https://en.wikipedia.org/wiki/Volatile_(computer_programming)&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;引用指出 volatile 是为了防止编译“优化”对该变量的一系列读写操作。上面抛出一大段结论，还是挺令人疑惑的。什么叫 may change between different accesses， 什么叫 optimizing away subsequent reads or writes？这一切用“底层“的汇编来解释反而容易。
&lt;a href=&#34;http://neilsh.com/assets/code/v_int.c&#34;&gt;带有 volatile&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// volatile_int.c
volatile int foo;

// 总计4次对 foo 的操作
void main(void) {
    foo = 0xff;
    printf(&amp;quot;%d\n&amp;quot;, foo);
    foo = 0xff;
    printf(&amp;quot;%d\n&amp;quot;, foo);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 编译
$ gcc -O1 volatile_int.c -o volatile_int
# 查看汇编
$ objdump -S volatile_int &amp;gt; v.asm
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;000000000040055d &amp;lt;main&amp;gt;:
  40055d:	48 83 ec 08          	sub    $0x8,%rsp
  400561:	c7 05 d9 0a 20 00 ff 	movl   $0xff,0x200ad9(%rip)        # 601044 &amp;lt;foo&amp;gt;
  400568:	00 00 00 
  40056b:	8b 15 d3 0a 20 00    	mov    0x200ad3(%rip),%edx        # 601044 &amp;lt;foo&amp;gt;
  400571:	be 34 06 40 00       	mov    $0x400634,%esi
  400576:	bf 01 00 00 00       	mov    $0x1,%edi
  40057b:	b8 00 00 00 00       	mov    $0x0,%eax
  400580:	e8 db fe ff ff       	callq  400460 &amp;lt;__printf_chk@plt&amp;gt;
  400585:	c7 05 b5 0a 20 00 ff 	movl   $0xff,0x200ab5(%rip)        # 601044 &amp;lt;foo&amp;gt;
  40058c:	00 00 00 
  40058f:	8b 15 af 0a 20 00    	mov    0x200aaf(%rip),%edx        # 601044 &amp;lt;foo&amp;gt;
  400595:	be 34 06 40 00       	mov    $0x400634,%esi
  40059a:	bf 01 00 00 00       	mov    $0x1,%edi
  40059f:	b8 00 00 00 00       	mov    $0x0,%eax
  4005a4:	e8 b7 fe ff ff       	callq  400460 &amp;lt;__printf_chk@plt&amp;gt;
  4005a9:	48 83 c4 08          	add    $0x8,%rsp
  4005ad:	c3                   	retq   
  4005ae:	66 90                	xchg   %ax,%ax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://neilsh.com/assets/code/nv_int.c&#34;&gt;不带 volatile&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;000000000040055d &amp;lt;main&amp;gt;:
  40055d:	48 83 ec 08          	sub    $0x8,%rsp
  400561:	c7 05 d9 0a 20 00 ff 	movl   $0xff,0x200ad9(%rip)        # 601044 &amp;lt;foo&amp;gt;
  400568:	00 00 00 
  40056b:	ba ff 00 00 00       	mov    $0xff,%edx
  400570:	be 34 06 40 00       	mov    $0x400634,%esi
  400575:	bf 01 00 00 00       	mov    $0x1,%edi
  40057a:	b8 00 00 00 00       	mov    $0x0,%eax
  40057f:	e8 dc fe ff ff       	callq  400460 &amp;lt;__printf_chk@plt&amp;gt;
  400584:	c7 05 b6 0a 20 00 ff 	movl   $0xff,0x200ab6(%rip)        # 601044 &amp;lt;foo&amp;gt;
  40058b:	00 00 00 
  40058e:	ba ff 00 00 00       	mov    $0xff,%edx
  400593:	be 34 06 40 00       	mov    $0x400634,%esi
  400598:	bf 01 00 00 00       	mov    $0x1,%edi
  40059d:	b8 00 00 00 00       	mov    $0x0,%eax
  4005a2:	e8 b9 fe ff ff       	callq  400460 &amp;lt;__printf_chk@plt&amp;gt;
  4005a7:	48 83 c4 08          	add    $0x8,%rsp
  4005ab:	c3                   	retq   
  4005ac:	0f 1f 40 00          	nopl   0x0(%rax)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对比可见，带有 volatile 的对 foo 有四次操作，而不带的只有 2 次，从这个例子可以看出一些端倪， volatile 确保了 C 源码中每次对 foo 的操作都是直接对 foo 内存地址的操作。&lt;/p&gt;

&lt;h4 id=&#34;指针与数组:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;指针与数组&lt;/h4&gt;

&lt;p&gt;用伪码来简述一下两者的关系。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char *pc = 0；
int *pi = 0;
int ai[5] = {0, 1, 2, 3, 4};

(pc += 1) == 1 is true;

if (sizeof(int) == 4)
    then pi + 1 == 4 is true; ((int *)pc) + 1 == 5 is true;

*ai == 0 is true

pi = ai
    then *pi == 0, pi[1] == 1, pi[4] == 4 are true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自从学了6.828后，指针再也不是洪水猛兽，自以为余已达收发自如的境界。&lt;/p&gt;

&lt;h3 id=&#34;杂项:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;杂项&lt;/h3&gt;

&lt;p&gt;对各种计算机术语有了新的认识：process、thread、stub、trap、caller、callee、coroutine等等。
各种命令：man、git、make、gcc、objdump等等。特别是man，我还是第一次知道，man还能当编程手册，查看函数的用法。
理论与实践之间的差异，工程上的权衡于妥协。&lt;/p&gt;

&lt;h2 id=&#34;一些资源:1f5d1f87c04791fc85f6df330cc0063e&#34;&gt;一些资源&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://pdos.csail.mit.edu/6.828/2014/index.html&#34;&gt;官方网站&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLfciLKR3SgqNJKKIKUliWoNBBH1VHL3AP&#34;&gt;课程视频&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/overvenus/jos/&#34;&gt;我的 JOS (已完成lab1～6)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后，再次感谢 MIT 的教师职员们，并以一张 JOS 靓照结尾。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/7f793092gw1evohw0nih7j20k00bw75r.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;个人笔记，难免有误，如有发现，还望指出。
END.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>内核的启动和建立虚拟内存</title>
      <link>http://neilsh.com/2015/07/02/os_setup_and_virtual_memory_setup/</link>
      <pubDate>Thu, 02 Jul 2015 14:57:41 +0800</pubDate>
      
      <guid>http://neilsh.com/2015/07/02/os_setup_and_virtual_memory_setup/</guid>
      <description>

&lt;h2 id=&#34;引言:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;引言&lt;/h2&gt;

&lt;p&gt;这篇博文写 JOS 如何建立虚拟内存，同时也是 MIT6.828 Lab2 的答案。
JOS 是 MIT6.828 操作系统课程中给学生练习用的小型内核。JOS 是一个 X86 平台的32位操作系统，它是根据 Unix 第6版 设计的，也就是这篇paper &lt;a href=&#34;http://pdos.csail.mit.edu/6.828/2014/readings/ritchie78unix.pdf&#34;&gt;The UNIX Time-Sharing System&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;mmu的工作机制:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;MMU的工作机制&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MMU&lt;/code&gt;是 x86 CPU 集成的一个硬件，负责把虚拟地址翻译成物理地址。增加一层翻译不是会降低性能，那为什么不直接用物理地址？这是因为设计 Computer 和 OS 的 Scientists 为了实现不同应用程序之间的 isolation 以增加 safety 和降低应用程序的 Complexity。
&lt;code&gt;MMU&lt;/code&gt;在计算机启动初期是不工作的，只有寄存器&lt;code&gt;cr0&lt;/code&gt;中的flag打开，它才会工作。&lt;/p&gt;

&lt;p&gt;本文写最简单的32位虚拟内存机制，同样也是 JOS 用的。
先祭出一张神图，这张图生动形象的说明了&lt;code&gt;MMU&lt;/code&gt;的工作流程：
&lt;!-- more --&gt;
&lt;img src=&#34;http://ww1.sinaimg.cn/large/7f793092gw1etosykok6uj216o1kwdq0.jpg&#34; alt=&#34;&#34; /&gt;
术语说明：
&amp;gt; &lt;code&gt;page&lt;/code&gt;: &lt;code&gt;MMU&lt;/code&gt; 在逻辑上把内存分割为一个一个4KB大小的块。
&amp;gt; &lt;code&gt;page table&lt;/code&gt;: 一个 &lt;code&gt;page&lt;/code&gt;，大小4KB，内容是*1024个*指向不同 &lt;code&gt;page&lt;/code&gt; 的地址及其权限。
&amp;gt; &lt;code&gt;page directory&lt;/code&gt;：一个 &lt;code&gt;page&lt;/code&gt;，大小4KB，内容是*1024个*指向不同 &lt;code&gt;page table&lt;/code&gt; 的地址及其权限。
&amp;gt; &lt;code&gt;cr3&lt;/code&gt;: x86 CPU 中的一个寄存器，存有一个32位的地址，指向一个 &lt;code&gt;page directory&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;单个&lt;code&gt;page&lt;/code&gt;的寻址：
&amp;gt; 4KB = 4096 = 0x1000&lt;/p&gt;

&lt;p&gt;由于每一个 &lt;code&gt;page&lt;/code&gt; 都是4KB，它们的起始地址是*0x?????000*，以3个0x0结尾，所以*真正有效*的数据是前20bits。之后的12bits可用来设置该 &lt;code&gt;page&lt;/code&gt;的权限。这也解释了为什么神图中仅靠前20bits的&lt;code&gt;PPN&lt;/code&gt;就能找到对应的&lt;code&gt;page&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一个&lt;code&gt;page directory&lt;/code&gt;足以映射4GB的内存：
&amp;gt; 1 x 1024 x 1024 x (4 x 1024) = 4GB
&amp;gt; one &lt;code&gt;cr3&lt;/code&gt; points to one &lt;code&gt;page directory&lt;/code&gt;
&amp;gt; one &lt;code&gt;page directory&lt;/code&gt; has 1024 &lt;code&gt;page tables&lt;/code&gt;
&amp;gt; one &lt;code&gt;page table&lt;/code&gt; has 1024 &lt;code&gt;pages&lt;/code&gt;
&amp;gt; one &lt;code&gt;page&lt;/code&gt; has 4KB memory&lt;/p&gt;

&lt;h2 id=&#34;bootloader-到内核:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;BootLoader 到内核&lt;/h2&gt;

&lt;p&gt;BIOS 把硬盘第一个扇区的数据(BootLoader)加载到内存物理地址&lt;code&gt;0x7c00&lt;/code&gt;后，便把&lt;code&gt;eip = 7c00&lt;/code&gt;，CPU 开始执行内存&lt;code&gt;7c00&lt;/code&gt;处(BootLoader)的代码，此时 CPU 还未开启 &lt;code&gt;PAGING&lt;/code&gt;，并处于16位模式。BootLoager要做的就是关闭中断，开启保护模式，进入32位工作状态，并且把硬盘中的内核加载代内存&lt;code&gt;0x10000&lt;/code&gt;处，然后把硬件的使用权移交给内核。&lt;/p&gt;

&lt;h2 id=&#34;内核初期的内存映射:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;内核初期的内存映射&lt;/h2&gt;

&lt;h3 id=&#34;开启-mmu:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;开启 MMU&lt;/h3&gt;

&lt;p&gt;内核接管硬件后，所有的地址都是物理地址，&lt;code&gt;eip&lt;/code&gt;寄存器指向物理地址的内核指令。之后，内核第一时间开启了&lt;code&gt;MMU&lt;/code&gt;。下面是 JOS 内核启动的头几条汇编代码，在&lt;code&gt;entry.S&lt;/code&gt;文件中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;.text
# The Multiboot header
.align 4
.long MULTIBOOT_HEADER_MAGIC
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

# &#39;_start&#39; specifies the ELF entry point.  Since we haven&#39;t set up
# virtual memory when the bootloader enters this code, we need the
# bootloader to jump to the *physical* address of the entry point.
.globl		_start
_start = RELOC(entry)

.globl entry
entry:
	movw	$0x1234,0x472			# warm boot

    # entry_pgdir 是 page directory，被硬编码在内核中。
	movl	$(RELOC(entry_pgdir)), %eax
	movl	%eax, %cr3
	# Turn on paging.  开启 PAGING
	movl	%cr0, %eax
	orl	$(CR0_PE|CR0_PG|CR0_WP), %eax
	movl	%eax, %cr0
#接下面的汇编代码
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但此时虚拟内存还没有建立，代码操作的地址还是物理地址，所用的 page directory 及 page table 硬编码在内核中，虚拟地址和物理地址是*一对一且连续映射*的。
下面是硬编码在内核中的 page directory。大意就是虚拟地址&lt;code&gt;0x0000 0000～0x0040 0000&lt;/code&gt;和&lt;code&gt;0xF000 0000～0xF040 0000&lt;/code&gt;都映射到物理地址&lt;code&gt;0x0000 0000～0x0040 0000&lt;/code&gt;，且是*连续一对一映射*。换句话说，整个内核的虚拟地址就是物理地址加上&lt;code&gt;KERNBASE&lt;/code&gt;，详细下面内核结构会解释。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define KERNBASE 0xF0000000
__attribute__((__aligned__(PGSIZE)))  // 4KB 对齐
pde_t entry_pgdir[1024] = {
	// Map VA&#39;s [0, 4MB) to PA&#39;s [0, 4MB)
	[0]
		= ((uintptr_t)entry_pgtable - KERNBASE) + PTE_P,
	// Map VA&#39;s [KERNBASE, KERNBASE+4MB) to PA&#39;s [0, 4MB)
	[KERNBASE&amp;gt;&amp;gt;22]
		= ((uintptr_t)entry_pgtable - KERNBASE) + PTE_P + PTE_W
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过这样做还是有问题，这个 page directory 及其 page table 必须要在内存开始的头4MB之内，不然MMU就会报错。不过幸好，我们的内核还不大，4MB足够装下，实际上还有许多空闲的空间。&lt;/p&gt;

&lt;h3 id=&#34;工作在虚拟地址:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;工作在虚拟地址&lt;/h3&gt;

&lt;p&gt;开启&lt;code&gt;MMU&lt;/code&gt;后，所有对内存的操作都会经过翻译，CPU 的&lt;code&gt;eip&lt;/code&gt;寄存器还是指向低位的物理地址，为了后续代码的正常工作，我们要把它转化为指向高位的虚拟地址，在 JOS 这个转化很简单，其实质就是加上&lt;code&gt;KERNBASE&lt;/code&gt;，理由见上面&lt;code&gt;entry_pgdir&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#接上面的汇编代码。
	# Now paging is enabled, but we&#39;re still running at a low EIP
	# (why is this okay?).  Jump up above KERNBASE before entering
	# C code.
	mov	$relocated, %eax
	jmp	*%eax
relocated:  # 此处的虚拟地址=物理地址+KERNBASE
    # ... 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;jmp&lt;/code&gt;之后内存就正式工作完成初期的&lt;code&gt;PAGING&lt;/code&gt;。
为什么要&lt;code&gt;jmp&lt;/code&gt;一下（疑惑脸）？请看&lt;code&gt;内核的结构&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;内核的结构:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;内核的结构&lt;/h3&gt;

&lt;p&gt;我*认为（可能有错，还没学过编译）*：
&amp;gt; JOS 的内核是虚拟按地址链接的，所有&lt;code&gt;symbol&lt;/code&gt;（，代码和静态变量？）的地址都是虚拟地址（对于内核初期来说）。&lt;/p&gt;

&lt;p&gt;这句话是什么意思？请看内核的链接文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENTRY(_start)
SECTIONS
{
	/* Link the kernel at this address: &amp;quot;.&amp;quot; means the current address */
	. = 0xF0100000;

	/* AT(...) gives the load address of this section, which tells
	   the boot loader where to load the kernel in physical memory */
	.text : AT(0x100000) {
		*(.text .stub .text.* .gnu.linkonce.t.*)
	}

	PROVIDE(etext = .);	/* Define the &#39;etext&#39; symbol to this value */
    /* ... */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用这链接文件编译出的内核的 section headers 如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ objdump -h obj/kern/kernel

obj/kern/kernel:     file format elf32-i386
Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001947  f0100000  00100000  00001000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000770  f0101960  00101960  00002960  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .stab         00003919  f01020d0  001020d0  000030d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stabstr      00001907  f01059e9  001059e9  000069e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000a300  f0108000  00108000  00009000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000644  f0112300  00112300  00013300  2**5
                  ALLOC
  6 .comment      00000024  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;VMA&lt;/code&gt;：virtual memory address | &lt;code&gt;LMA&lt;/code&gt;：load memory address
&lt;code&gt;0 .text         00001947  f0100000  00100000  00001000  2**4&lt;/code&gt;，
&lt;code&gt;.text&lt;/code&gt;的虚拟地址是&lt;code&gt;0xf0100000&lt;/code&gt;，加载地址（执行地址）&lt;code&gt;0x00100000&lt;/code&gt;。
内核的第一条指令在内存&lt;code&gt;0x00100000&lt;/code&gt;处，&lt;code&gt;eip = 0x00100000&lt;/code&gt;，虚拟地址是&lt;code&gt;0xf0100000&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;再看内核的 symbol table：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ objdump -t obj/kern/kernel | sed &#39;1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d&#39;
addr.      sym.
0010000c T _start
f010000c T entry
f010002f t relocated
f010003e t spin
f0100040 T i386_init
f0100094 T _panic
f01000f3 T _warn
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;0010000c T _start&lt;/code&gt; 和 &lt;code&gt;f010000c T entry&lt;/code&gt; 它们就是上面的汇编代码中的&lt;code&gt;_start&lt;/code&gt; 和 &lt;code&gt;entry&lt;/code&gt;。
这意味着 &lt;code&gt;0010000c&lt;/code&gt; 和 &lt;code&gt;f010000c&lt;/code&gt; 指向的是同一处。因为内核从&lt;code&gt;f010000c&lt;/code&gt;开始链接，所以&lt;code&gt;relocated&lt;/code&gt;处于高位（即虚拟地址）。&lt;code&gt;jmp&lt;/code&gt;是为了使&lt;code&gt;eip&lt;/code&gt;指向虚拟地址的内核代码。&lt;code&gt;mov&lt;/code&gt;是为了防止 assembler 把&lt;code&gt;jmp&lt;/code&gt;“优化”掉。&lt;/p&gt;

&lt;h3 id=&#34;内核建立虚拟内存:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;内核建立虚拟内存&lt;/h3&gt;

&lt;p&gt;完成上面的工作之后，内核开始建立虚拟内存。
&lt;code&gt;pmap.c&lt;/code&gt;是 JOS 的内存管理的源码文件。下面是一些关键的全局变量。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;// These variables are set by i386_detect_memory()
size_t npages;			// Amount of physical memory (in pages)
static size_t npages_basemem;	// Amount of base memory (in pages)

// These variables are set in mem_init()
pde_t *kern_pgdir;		// Kernel&#39;s initial page directory
// 用来代表`page`的结构体
struct PageInfo *pages;		// Physical page state array
static struct PageInfo *page_free_list;	// Free list of physical pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;void mem_init(void);&lt;/code&gt;这函数初始化硬件的全部内存并建立虚拟内存。下面我节选了部分代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void mem_init(void) {
	// Find out how much memory the machine has (npages &amp;amp; npages_basemem).
	// 首先探测所有的机器有多少内存
	i386_detect_memory();
	//////////////////////////////////////////////////////////////////////
	// create initial page directory.
	// 用一个简易的 alloc 函数为变量`kern_pgdir`申请一个`page`，
	// 此`page`在kernel之后。`kern_pgdir`指向一个高位的虚拟地址。
	kern_pgdir = (pde_t *) boot_alloc(PGSIZE);
	memset(kern_pgdir, 0, PGSIZE);

	// 把`kern_pgdir`所在的 page 的低位物理地址插入到`kern_pgdir`对应的槽中，
	// 并设置权限。Permissions: kernel R, user R
	kern_pgdir[PDX(UVPT)] = PADDR(kern_pgdir) | PTE_U | PTE_P;

	// 为`PageInfo`申请空间，物理内存有多少就申请多少个`PageInfo`，这个链表在`kern_pgdir`之后
	// 这些`PageInfo`是为了新的内存管理机制做准备的，用以跟踪各`page`的使用情况。
	pages = (struct PageInfo *)boot_alloc(sizeof(struct PageInfo) * npages);
	// 等等。。。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时的物理内存的使用情况是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [BASEMEM] &amp;lt;------------- 0x00000000
    ...
    ...   640KB
    ...
    [IOPHYSMEM] &amp;lt;----------- 0x000A0000
    ...
    ...   I/O hole
    ...
    [EXTPHYSMEM] &amp;lt;---------- 0x00100000
    ...
    extern char entry[]; &amp;lt;-- 0x0010000c
    ...
    ...   kernel
    ...
    extern char end[]; &amp;lt;---- 0x00113970
    ...
    ...   由于4KB对齐，这会有空白
    ...
    `kern_pgdir`
    ...
    ....  one page gap
    ...
    `pages` itself!
    ...   used!
    ...   ...
    ...   used!
    ...   unused!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后的一些函数根据上面的图把已用的内存记录到&lt;code&gt;kern_pgdir&lt;/code&gt;和&lt;code&gt;pagetable&lt;/code&gt;中并设置权限。记录的方法大致是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// addr &amp;gt;&amp;gt; 22 取前10位
// (addr &amp;gt;&amp;gt;12) &amp;amp; 0x3FF 取中间10位

// log virtual_addr
pagetable_phys_addr = kern_pgdir[virtual_addr&amp;gt;&amp;gt;22]
pagetable_phys_addr[(virtual_addr&amp;gt;&amp;gt;12) &amp;amp; 0x3FF] = page_phys_addr

// `MMU` workflow
// virtual_addr to physical_addr
pagetable_phys_addr = kern_pgdir[(virtual_addr)&amp;gt;&amp;gt;22]
page_phys_addr = pagetable[(virtual_addr&amp;gt;&amp;gt;12) &amp;amp; 0x3FF]
physical_addr = (page_phy_addr &amp;amp; 0x3FF) | (virtual_addr &amp;amp; 0xFFFFFC00)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，内核实现了虚拟内存，并能动态分配，可以多个虚拟地址指向同一物理地址。JOS 这种的管理方式使得&lt;code&gt;page&lt;/code&gt;只有在被使用时才会记录到&lt;code&gt;pagetable&lt;/code&gt;中，类似于 lazy initialization。
这种虚拟地址的记录方式也同样解释了为什么程序在使用一个野指针的时候会退出，因为这个野指针指向的地址该程序无权访问的可能性很大，一旦访问&lt;code&gt;MMU&lt;/code&gt;会报&lt;code&gt;pagefault&lt;/code&gt;，从而使程序退出。&lt;/p&gt;

&lt;p&gt;完整的 pmap.c 文件在&lt;a href=&#34;http://neilsh.com/assets/code/pmap.c&#34;&gt;这可以获取&lt;/a&gt;，里面有比较完整的注释。&lt;/p&gt;

&lt;h2 id=&#34;总结:4d7dde7d86a055790fb12700223cbbb1&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;JOS 内核一启动就开启&lt;code&gt;MMU&lt;/code&gt;，用的&lt;code&gt;page directory&lt;/code&gt;是手写的预先编译在内核中的。之后再建立一个新的&lt;code&gt;page directory&lt;/code&gt;，这个&lt;code&gt;page directory&lt;/code&gt;是可以动态增加减少记录的，此时 JOS 内存的初始化算是完成了。&lt;/p&gt;

&lt;p&gt;个人笔记，难免有误，如有发现，还望指出。
END.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>